#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding utf8
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine natbib_numerical
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
libHX 2.9
\begin_inset Newline newline
\end_inset

Documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
libHX collects many useful day-to-day functions, intended to reduce the
 amount of otherwise repeatedly open-coded instructions.
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Itemize
Red-black binary tree with key-value pair extension (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:arbtree"

\end_inset

)
\begin_inset Newline newline
\end_inset

Originally created to provide a data structure like Perl's associative arrays.
 Uses an rbtree as underlying engine for somewhat quick insertion and deletion
 with a small memory footprint for ordered traversal.
 (Hashes would require gathering all keys first and sorting them.)
\end_layout

\begin_layout Itemize
Deques (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:deque"

\end_inset

)
\begin_inset Newline newline
\end_inset

Double-ended queues, implemented as a doubly-linked list with sentinels,
 are suitable for both providing stack and queue functionality.
\end_layout

\begin_layout Itemize
Inline doubly-linked list, uncounted and counted (sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:list"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:clist"

\end_inset

)
\begin_inset Newline newline
\end_inset

Light-weight linked lists as used in the Linux kernel.
\end_layout

\begin_layout Itemize
Common string operations (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:strings"

\end_inset

)
\begin_inset Newline newline
\end_inset

basename, chomp, dirname, getl(ine), split, strlcat/strlcpy, strlower/-upper,
 str*trim, strsep, etc.
\end_layout

\begin_layout Itemize
Memory containers, auto-sizing string operations (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:mc"

\end_inset

)
\begin_inset Newline newline
\end_inset

Scripting-like invocation for string handling
\begin_inset space ~
\end_inset

--- automatically doing (re)allocations as needed.
\end_layout

\begin_layout Itemize
String formatter (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:format"

\end_inset

)
\begin_inset Newline newline
\end_inset

HXfmt is a small template system for by-name variable expansion.
 It can be used to substitute placeholders in format strings supplied by
 the user by appropriate expanded values defined by the program.
\end_layout

\begin_layout Itemize
Directory creation, traversal, removal, and file copying (sections
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:dir-ops1"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:dir-ops2"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:file-ops"

\end_inset

)
\end_layout

\begin_layout Itemize
Option parsing (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:option"

\end_inset

)
\begin_inset Newline newline
\end_inset

Table-/callback-based option parser that works similar to Perl's 
\family typewriter
Getopt::Long
\family default

\begin_inset space ~
\end_inset

--- no open-coding but a single 
\begin_inset Quotes eld
\end_inset

atomic
\begin_inset Quotes erd
\end_inset

 invocation.
\end_layout

\begin_layout Itemize
Shell-style config parser (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:shconf"

\end_inset

)
\begin_inset Newline newline
\end_inset

Configuration file reader for Shell-style 
\begin_inset Quotes eld
\end_inset

configuration
\begin_inset Quotes erd
\end_inset

 files with key-value pairs, as usually foudn in 
\family typewriter
/etc/sysconfig
\family default
.
\end_layout

\begin_layout Itemize
Random number gathering (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:random"

\end_inset

)
\begin_inset Newline newline
\end_inset

Convenient wrapper that uses kernel-provided RNG devices when available.
\end_layout

\begin_layout Itemize
External process invocation (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:proc"

\end_inset

)
\begin_inset Newline newline
\end_inset

Setting up pipes for the standard file descriptors for sending/capturing
 data to/from a program.
\end_layout

\begin_layout Itemize

\shape italic
a bit more beyond that ...
 Miscellaneous
\end_layout

\begin_layout Section
Resources
\end_layout

\begin_layout Standard
As of this writing, the repository is located at
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

git://libhx.git.sf.net/gitroot/libhx
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- clone URL
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://libhx.git.sf.net/
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- gitweb interface
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://libhx.sf.net/
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- home page (and link to tarballs)
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://freshmeat.net/projects/libHX/
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- Freshmeat page (useful for subscription, i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset

automatic notification of releases)
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
libHX uses GNU autotools as a build environment, which means that all you
 have to run as a end-user is the 
\family typewriter
configure
\family default
 with any options that you need, plus the usual 
\family typewriter
make
\family default
 and 
\family typewriter
make install
\family default
 as desired.
\end_layout

\begin_layout Standard
Pay attention to bi-arch Linux distributions where you most likely need
 to specify 
\begin_inset Quotes eld
\end_inset

lib64
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

lib
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
$ 
\series bold
./configure --libdir='${prefix}/lib64'
\end_layout

\begin_layout Standard
Other libdir naming besides 
\begin_inset Quotes eld
\end_inset


\family typewriter
lib
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
lib64
\family default

\begin_inset Quotes erd
\end_inset

 may be in use by different distributions, but are rarely seen (like 
\begin_inset Quotes eld
\end_inset


\family typewriter
lib32
\family default

\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Itemize
GNU C Compiler 3.3.5 or newer.
 Other compilers (non-GCC) have not been tested in months
\begin_inset space ~
\end_inset

--- use at your own risk.
\end_layout

\begin_layout Itemize
approximately 80
\begin_inset space ~
\end_inset

KB of disk space on Linux for the shared library and header files; somewhat
 more for *BSD.
\end_layout

\begin_layout Standard
A C++ compiler is only needed if you want to build the test programs that
 come with libHX, in C++ mode.
 This is done by default so it may occur that you get prompted for a C++
 compiler, but it is not strictly required, as this is just for the test
 programs.
\end_layout

\begin_layout Itemize
No external libraries are needed for compilation of libHX.
 Helper files, like 
\family typewriter
libxml_helper.h
\family default
, may reference their include files, but they are not used during compilation.
\end_layout

\begin_layout Section
Portability notice
\end_layout

\begin_layout Standard
libHX runs on contemporary versions of Linux, Solaris and the three BSD
 distributions.
 It might even work on Microsoft Windows, but this is not tested very often,
 if at all.
 Overly old systems, especially Unices, are not within focus.
 While AIX
\begin_inset space ~
\end_inset

5.3 might still classify as contemporary, strangelets like 
\begin_inset Quotes eld
\end_inset

Ultrix
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Dynix
\begin_inset Quotes erd
\end_inset

 you can find in the autotools-related file 
\family typewriter
config.guess
\family default
 are some that are definitely not.
\end_layout

\begin_layout Standard
Furthermore, a compiler that understands the C99 or GNU89 standard is required.
 The integer type 
\begin_inset Quotes eld
\end_inset

int
\begin_inset Quotes erd
\end_inset

 should at best have 32 bits at least.
 There is no ultra-portable version as of this writing, but feel free to
 start one akin to the 
\begin_inset Quotes eld
\end_inset

p
\begin_inset Quotes erd
\end_inset

 variants of OpenBSD software such as OpenSSH.
\end_layout

\begin_layout Section
History
\end_layout

\begin_layout Standard
The origins of libHX trace back, even crossing a language boundary, to when
 the author started on using Perl in 1999.
 Some tasks were just too damn useful to be open-coded every time.
 Two such examples are what is these days known as 
\family typewriter
HX_basename
\family default
 and 
\family typewriter
HX_mkdir
\family default
.
 The name does not relate to anyone's initials; it is a result of a truncation
 of the author's nick used years ago.
\end_layout

\begin_layout Standard
Around the beginning of 2003, the author also started on the C programming
 language and soon the small library was converted from Perl to C.
 The libHX library as of today is the result of working with C ever since,
 and naturally grew from there to support whatever the author was in need
 of.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

correct
\begin_inset Quotes erd
\end_inset

 name for libHX is with an uppercase 
\begin_inset Quotes eld
\end_inset

H
\begin_inset Quotes erd
\end_inset

 and uppercase 
\begin_inset Quotes eld
\end_inset

X
\begin_inset Quotes erd
\end_inset

, and the same is used for filenames, such as 
\begin_inset Quotes eld
\end_inset

libHX.so
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Software projects may choose to entirely lowercase the project name for
 use in filenames, such as the Linux kernel which is released as 
\family typewriter
linux-${
\family default
\shape italic
version
\family typewriter
\shape default
}.tar.bz2
\family default
, or the project may choose to keep the name for filenames, like Mesa and
 SDL do.
 libHX is of the latter.
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
To-Do
\end_layout

\begin_layout Itemize
A hash map a.
\begin_inset space \thinspace{}
\end_inset

k.
\begin_inset space \thinspace{}
\end_inset

a.
 key-value pairs where the key is hashed.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
General
\end_layout

\begin_layout Standard
Many functions are prefixed with 
\begin_inset Quotes eld
\end_inset


\family typewriter
HX_
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
HXsubsys_
\family default

\begin_inset Quotes erd
\end_inset

, as are structures (sometimes without underscores, be sure to check the
 syntax and names), to avoid name clashes with possibly existing files.
 Functions that are not tied to a specific data structure such as most of
 the string functions (see chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:strings"

\end_inset

) use the subsystem-less prefix, 
\begin_inset Quotes eld
\end_inset


\family typewriter
HX_
\family default

\begin_inset Quotes erd
\end_inset

.
 Functions from a clearly-defined subsystem, such as ARBtree or deque, augment
 the base prefix by a suffix, forming e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\begin_inset Quotes eld
\end_inset


\family typewriter
HXbtree_
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Type-checking casts
\end_layout

\begin_layout Standard
The C++ language provides so-called 
\begin_inset Quotes eld
\end_inset

new-style casts
\begin_inset Quotes erd
\end_inset

, referring to the four template-looking invocations 
\family typewriter
static_cast<>
\family default
, 
\family typewriter
const_cast<>
\family default
, 
\family typewriter
reinterpret_cast<>
\family default
 and 
\family typewriter
dynamic_cast<>
\family default
.
 No such blessing was given to the C language, but still, even using macros
 that expand to the olde cast make it much easier to find casts in source
 code and annotate why something was casted, which is already an improvement.
\begin_inset space ~
\end_inset

--- Actually, it 
\shape italic
is
\shape default
 possible to do a some type checking, using some GCC extensions, which augments
 these macros from their documentary nature to an actual safety measure.
\end_layout

\begin_layout Subsection

\family typewriter
reinterpret_cast
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
reinterpret_cast
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
reinterpret_cast()
\family default
 maps directly to the old-style typecast, 
\family typewriter
(type)(expr)
\family default
, and causes the bit pattern for the expr rvalue to be 
\begin_inset Quotes eld
\end_inset

reinterpreted
\begin_inset Quotes erd
\end_inset

 as a new type.
 You will notice that 
\begin_inset Quotes eld
\end_inset

reinterpret
\begin_inset Quotes erd
\end_inset

 is the longest of all the 
\family typewriter
*_cast
\family default
 names, and can easily cause your line to grow to 80 columns (the good maximum
 in many style guides).
 As a side effect, it is a good indicator that something potentially dangerous
 might be going on, for example converting intergers from/to pointer.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/defs.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/defs.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Newline newline
\end_inset

int
\series default
 i;
\begin_inset Newline newline
\end_inset


\series bold
/* 
\family roman
\series default
\shape italic
Tree with numeric keys
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

tree = HXbtree_init(HXBT_ICMP);
\begin_inset Newline newline
\end_inset


\series bold
for
\series default
 (i = 0; i < 6; ++i)
\begin_inset Newline newline
\end_inset

        HXbtree_add(tree, 
\series bold
reinterpret_cast
\series default
(
\series bold
void *
\series default
,
\begin_inset Newline newline
\end_inset

                    
\series bold
static_cast
\series default
(
\series bold
long
\series default
, i)), my_data);
\end_layout

\begin_layout Subsection

\family typewriter
signed_cast
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
signed_cast
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This tag is for annotating that the cast was solely done to change the signednes
s of pointers to char
\begin_inset space ~
\end_inset

--- and only those.
 No integers etc.
 The intention is to facilitate working with libraries that use 
\family typewriter
unsigned char
\begin_inset space ~
\end_inset

*
\family default
 pointers, such as libcrypto and libssl (from the OpenSSL project) or libxml2,
 for example.
 See table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defs-signed_cast"

\end_inset

 for the allowed conversions.
 C++ does 
\shape italic
not
\shape default
 actually have a 
\family typewriter
signed_cast<>
\family default
, and one would have to use 
\family typewriter
reinterpret_cast<>
\family default
 to do the conversion, because 
\family typewriter
static_cast<>
\family default
 does not allow conversion from 
\family typewriter
const char
\begin_inset space ~
\end_inset

*
\family default
 to 
\family typewriter
const unsigned char
\begin_inset space ~
\end_inset

*
\family default
, for example.
 (libHX's 
\family typewriter
static_cast()
\family default
 would also throw at least a compiler warning about the different signedness.)
 libHX does provide a 
\family typewriter
signed_cast<>
\family default
 for C++ though.
 This is where 
\family typewriter
signed_cast
\family default
 comes in.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="7">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
From 
\backslash
 To
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
c*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
sc*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
uc*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Cc*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Csc*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Cuc*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
signed char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
unsigned char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
const char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
const signed char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
const unsigned char *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:defs-signed_cast"

\end_inset

Accepted conversions for 
\family typewriter
signed_cast()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
static_cast
\begin_inset CommandInset label
LatexCommand label
name "sub:defs-static_cast"

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
static_cast
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Just like C++'s 
\family typewriter
static_cast<>
\family default
, libHX's 
\family typewriter
static_cast()
\family default
 verifies that 
\family typewriter
expr
\family default
 can be implicitly converted to the new type (by a simple 
\family typewriter
b
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

a
\family default
).
 Such is mainly useful for forcing a specific type, as is needed in varargs
 functions such as 
\family typewriter
printf
\family default
, and where the conversion actually incurs other side effects, such as truncatio
n or promotion:
\end_layout

\begin_layout LyX-Code

\series bold
/* 
\family roman
\series default
\shape italic
Convert to a type printf knows about
\family default
\series bold
\shape default
 */
\begin_inset Newline newline
\end_inset

uint64_t
\series default
 x = something;
\begin_inset Newline newline
\end_inset

printf("%llu
\backslash
n", 
\series bold
static_cast
\series default
(
\series bold
unsigned long long
\series default
, x));
\end_layout

\begin_layout Standard
Because there is no format specifier for 
\family typewriter
uint64_t
\family default
 for 
\family typewriter
printf
\family default
, a conversion to an accepted type is necessary to not cause undefined behavior.
 The author has seen code that did, for example, 
\family typewriter
printf("%u")
\family default
 on a 
\begin_inset Quotes eld
\end_inset

long
\begin_inset Quotes erd
\end_inset

, which only works on architectures where 
\family typewriter
sizeof(unsigned int)
\family default
 happens to equal 
\family typewriter
sizeof(unsigned long)
\family default
, such as x86_32.
 On x86_64, an 
\family typewriter
unsigned long
\family default
 is usually twice as big as an 
\family typewriter
unsigned int
\family default
, so that 8 bytes are pushed onto the stack, but 
\family typewriter
printf
\family default
 only unshifts 4 bytes because the developer used 
\begin_inset Quotes eld
\end_inset


\family typewriter
%u
\family default

\begin_inset Quotes erd
\end_inset

, leading to misreading the next variable on the stack.
\end_layout

\begin_layout LyX-Code

\series bold
/* 
\family roman
\series default
\shape italic
Force promotion
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset


\series bold
double
\series default
 a_quarter = 
\series bold
static_cast
\series default
(
\series bold
double
\series default
, 1) / 4;
\end_layout

\begin_layout Standard
Were 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 not promoted to double, the result in 
\family typewriter
q
\family default
 would be zero because 1/4 is just an integer division, yielding zero.
 By making one of the operands a floating-point quantity, the compiler will
 instruct the FPU to compute the result.
 Of course, one could have also written 
\begin_inset Quotes eld
\end_inset


\family typewriter
1.0
\family default

\begin_inset Quotes erd
\end_inset

 instead of 
\family typewriter
static_cast(double, 1)
\family default
, but this is left for the programmer to decide which style s/he prefers.
\end_layout

\begin_layout LyX-Code

\series bold
/* 
\family roman
\series default
\shape italic
Force truncation before invoking second sqrt
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset


\series bold
double
\series default
 f = sqrt(
\series bold
static_cast
\series default
(
\series bold
int
\series default
, 10 * sqrt(3.0 / 4)));
\end_layout

\begin_layout Standard
And here, the conversion from 
\family typewriter
double
\family default
 to 
\family typewriter
int
\family default
 incurs a (wanted) truncation of the decimal fraction, that is, rounding
 down for positive numbers, and rounding up for negative numbers.
\end_layout

\begin_layout Subsubsection
Allowed conversions
\end_layout

\begin_layout Itemize

\series bold
Numbers
\series default

\begin_inset Newline newline
\end_inset

Conversion between numeric types, such as 
\family typewriter
char
\family default
, 
\family typewriter
short
\family default
, 
\family typewriter
int
\family default
, 
\family typewriter
long
\family default
, 
\family typewriter
long long
\family default
, 
\family typewriter
int
\shape italic
N
\shape default
_t
\family default
, both their signed and unsigned variants, 
\family typewriter
float
\family default
 and 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\series bold
Generic Pointer
\series default

\begin_inset Newline newline
\end_inset

Conversion from 
\family typewriter
type
\begin_inset space ~
\end_inset

*
\family default
 to and from 
\family typewriter
void
\begin_inset space ~
\end_inset

*
\family default
.
 (Where 
\family typewriter
type
\family default
 may very well be a type with further indirection.)
\end_layout

\begin_layout Itemize

\series bold
Generic Pointer (const)
\begin_inset Newline newline
\end_inset


\series default
Conversion from 
\family typewriter
const type
\begin_inset space ~
\end_inset

*
\family default
 to and from 
\family typewriter
const void
\begin_inset space ~
\end_inset

*
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
const_cast
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
const_cast
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
const_cast
\family default
 allows to add or remove 
\begin_inset Quotes eld
\end_inset

const
\begin_inset Quotes erd
\end_inset

 qualifiers from the type a pointer is pointing to.
 Due to technical limitations, it could not be implemented to support arbitrary
 indirection.
 Instead, 
\family typewriter
const_cast
\family default
 comes in three variants, to be used for indirection levels of 1 to 3:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
const_cast
\series default
1(
\series bold
type
\begin_inset space ~
\end_inset

*
\series default
, expr)
\family default
 with 
\family typewriter
\series bold
typeof
\series default
(expr)
\begin_inset space ~
\end_inset

= 
\series bold
type
\begin_inset space ~
\end_inset

*
\family default
\series default
.
 (Similarly for any combinations of const.)
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
const_cast
\series default
2(
\series bold
type
\begin_inset space ~
\end_inset

**
\series default
, expr) with 
\series bold
typeof
\series default
(expr)
\begin_inset space ~
\end_inset

= 
\series bold
type
\begin_inset space ~
\end_inset

**
\family default
\series default
 (and all combinations of const in all possible locations).
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
const_cast
\series default
3(
\series bold
type
\begin_inset space ~
\end_inset

***
\series default
, expr) with 
\series bold
typeof
\series default
(expr)
\begin_inset space ~
\end_inset

= 
\series bold
type
\begin_inset space ~
\end_inset

***
\family default
\series default
 (and all combinations...).
\end_layout

\begin_layout Standard
As indirection levels above 3 are really unlikely, having only these three
 type-checking cast macros was deemed sufficient.
 The only place where libHX even uses a level\SpecialChar \nobreakdash-
3 indirection is in the option
 parser.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int **
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int *const *
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
const int **
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
const int *const *
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Accepted expr/target types for 
\family typewriter
const_cast2
\family default
; example for the 
\begin_inset Quotes eld
\end_inset

int
\begin_inset Quotes erd
\end_inset

 type
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
Conversion is permitted when expression and target type are from the table.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Macros
\end_layout

\begin_layout Standard
All macros in this section are available through 
\family typewriter
#include <libHX/defs.h>
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/defs.h
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Preprocessor
\end_layout

\begin_layout LyX-Code

\series bold
#define
\series default
 HX_STRINGIFY(s)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_STRINGIFY
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Transforms the expansion of the argument 
\family typewriter
s
\family default
 into a C string.
\end_layout

\begin_layout Subsection
Locators
\end_layout

\begin_layout LyX-Code

\series bold
long
\series default
 offsetof(type, member);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
offsetof
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
output_type *
\series default
containerof(
\series bold
input_type *
\series default
ptr, output_type, member);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
containerof
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In case 
\family typewriter
offsetof
\family default
 and 
\family typewriter
containerof
\family default
 have not already defined by inclusion of another header file, libHX's defs.h
 will define these accessors.
 
\family typewriter
offsetof
\family default
 is defined in 
\family typewriter
stddef.h
\family default
 (for C) or 
\family typewriter
cstddef
\family default
 (C++), but inclusion of these is not necessary if you have included 
\family typewriter
defs.h
\family default
.
 defs.h will use GCC's 
\family typewriter
__builtin_offsetof
\family default
 if available, which does some extra sanity checks in C++ mode.
\end_layout

\begin_layout Standard

\family typewriter
offsetof
\family default
 calculates the offset of the specified member in the type, which needs
 to be a struct or union.
\end_layout

\begin_layout Standard

\family typewriter
containerof
\family default
 will return a pointer to the struct in which ptr is contained as the given
 member.
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 foo {
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 bar;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 baz;
\end_layout

\begin_layout LyX-Code
};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static void
\series default
 test(
\series bold
int *
\series default
ptr)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 foo 
\series bold
*
\series default
self = containerof(baz, 
\series bold
struct
\series default
 foo, baz);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsection
Array size
\end_layout

\begin_layout LyX-Code

\series bold
size_t
\series default
 ARRAY_SIZE(
\series bold
type
\series default
 array
\series bold
[]
\series default
); 
\series bold
/* 
\family roman
\series default
\shape italic
implemented as a macro
\family default
\series bold
\shape default
 */
\series default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
ARRAY_SIZE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the number of elements in 
\family typewriter
array
\family default
.
 This only works with true arrays (
\family typewriter
type[]
\family default
), and will not output a meaningful value when used with a pointer-to-element
 (
\family typewriter
type
\begin_inset space ~
\end_inset

*
\family default
), which is often used for array access too.
\end_layout

\begin_layout Subsection
Compile-time build checks
\end_layout

\begin_layout LyX-Code

\series bold
void
\series default
 BUILD_BUG_ON(
\series bold
bool
\series default
 condition); 
\series bold
/* 
\family roman
\series default
\shape italic
implemented as a macro
\family default
\series bold
\shape default
 */
\series default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
BUILD_BUG_ON
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Causes the compiler to fail when 
\family typewriter
condition
\family default
 evaluates to true.
 If not implemented for a compiler, it will be a no-op.
\end_layout

\begin_layout Subsection
UNIX file modes
\end_layout

\begin_layout LyX-Code

\series bold
#define
\series default
 S_IRUGO (S_IRUSR | S_IRGRP | S_IROTH)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
S_IRUGO
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
#define
\series default
 S_IWUGO (S_IWUSR | S_IWGRP | S_IWOTH)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
S_IWUGO
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
#define
\series default
 S_IXUGO (S_IXUSR | S_IXGRP | S_IXOTH)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
S_IXUGO
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
#define
\series default
 S_IRWXUGO (S_IRUGO | S_IWUGO | S_IXUGO)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
S_IRWXUGO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The defines make it vastly easier to specify permissions for large group
 of users.
 For example, if one wanted to create a file with the permissions 
\family typewriter
rw-r--r--
\family default
 (ignoring the umask in this description), 
\family typewriter
S_IRUSR
\begin_inset space ~
\end_inset

| S_IWUSR
\family default
 can now be used instead of the longer 
\family typewriter
S_IRUSR
\begin_inset space ~
\end_inset

| S_IWUSR
\begin_inset space ~
\end_inset

| S_IRGRP
\begin_inset space ~
\end_inset

| S_IROTH
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Miscellaneous functions
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/misc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_ffs(
\series bold
unsigned long
\series default
 z);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_ffs
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_fls(
\series bold
unsigned long
\series default
 z);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_fls
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HX_hexdump(
\series bold
FILE *
\series default
fp, 
\series bold
const void *
\series default
ptr, 
\series bold
unsigned int
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_hexdump
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_time_compare(
\series bold
const struct
\series default
 stat 
\series bold
*
\series default
a, 
\series bold
const struct
\series default
 stat 
\series bold
*
\series default
b, 
\series bold
int
\series default
 mode);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_time_compare
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HX_zvecfree(
\series bold
char **
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_zvecfree
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_zveclen(
\series bold
const char *const *
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_zveclen
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_ffs
\family default
 Finds the first (lowest-significant) bit in a value and returns its position,
 or -1 to indicate failure.
\end_layout

\begin_layout Description

\family typewriter
HX_fls
\family default
 Finds the last (most-significant) bit in a value and returns its position,
 or -1 to indicate failure.
\end_layout

\begin_layout Description

\family typewriter
HX_hexdump
\family default
 Outputs a nice pretty-printed hex and ASCII dump to the filedescriptor
 
\family typewriter
fp
\family default
.
 
\family typewriter
ptr
\family default
 is the memory area, of which 
\family typewriter
len
\family default
 bytes will be dumped.
\end_layout

\begin_layout Description

\family typewriter
HX_time_compare
\family default
 Compares the timestamps from two 
\family typewriter
struct stat
\family default
s.
 
\family typewriter
mode
\family default
 indicates which field is compared, which can either be 
\family typewriter
'a'
\family default
 for the access time, 
\family typewriter
'c'
\family default
 for the inode change time, 
\family typewriter
'm'
\family default
 for the modification time, or 
\family typewriter
'o'
\family default
 for the creation time (where available).
 Returns a negative number if the time in 
\family typewriter
a
\family default
 is less than 
\family typewriter
b
\family default
, zero when they are equal, or a positive number greater than zero if 
\family typewriter
a
\family default
 is greater than 
\family typewriter
b
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HX_zvecfree
\family default
 Frees the supplied Z-vector array.
 (Frees all array elements from the first element to (excluding) the first
 
\family typewriter
NULL
\family default
 element.)
\end_layout

\begin_layout Description

\family typewriter
HX_zveclen
\family default
 Counts the number of array elements until the first 
\family typewriter
NULL
\family default
 array element is seen, and returns this number.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Data structures
\end_layout

\begin_layout Section
ARBtree
\begin_inset CommandInset label
LatexCommand label
name "sec:arbtree"

\end_inset


\end_layout

\begin_layout Standard
ARBtree stands for 
\begin_inset Quotes eld
\end_inset

associative red-black tree
\begin_inset Quotes erd
\end_inset

 and implements a structure that can be used in a multitude of scenarios,
 ranging from a poor man's sorting mechanism, a sparse bitmap, over to a
 key-value map.
 Using a red-black tree as ADT allows for somewhat quick insertion and deletion
 and small memory footprint for ordered traversals.
 (Using a hash would have meant to gather all keys first and sort them instead.)
 
\end_layout

\begin_layout Subsection
Structural definition
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/arbtree.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/arbtree.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXbtree {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXbtree
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
uptr;
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
public readonly:
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 items;
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
Unlisted members are 
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset

.

\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXbtree_node {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXbtree_node
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
public readonly/readwrite (see notes in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:arbtree-storage"

\end_inset

):
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        
\series bold
union
\series default
 {
\begin_inset Newline newline
\end_inset

                
\series bold
void *
\series default
key;
\begin_inset Newline newline
\end_inset

                
\series bold
const char *const
\series default
 skey;
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
union
\series default
 {
\begin_inset Newline newline
\end_inset

                
\series bold
void *
\series default
data;
\begin_inset Newline newline
\end_inset

                
\series bold
char *
\series default
sdata;
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
Unlisted members are 
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset

.

\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
Member descriptions for 
\family typewriter
struct HXbtree
\family default
:
\end_layout

\begin_layout Description

\family typewriter
uptr
\family default
 A custom user-supplied pointer, usually to aid associating the tree with
 something else when needed
\end_layout

\begin_layout Description

\family typewriter
items
\family default
 The number of items in the tree.
 This field tracks the number of items in the tree and is used to report
 the number of elements to the user, and is updated whenever an element
 is inserted or removed from the tree.
 This is faster than deep-walking the tree everytime.
 The field must not be changed by user.
\end_layout

\begin_layout Standard
Member descriptions for 
\family typewriter
struct HXbtree_node
\family default
:
\end_layout

\begin_layout Description

\family typewriter
key
\family default
 The key for this node.
 It uniquely identifies the object (node), depending on the implementation
 of the chosen key comparison function.
\end_layout

\begin_layout Description

\family typewriter
data
\family default
 Any associated data, in case of a 
\family typewriter
HXBT_\SpecialChar \-
MAP
\family default
 tree.
\end_layout

\begin_layout Subsection
Storage models
\begin_inset CommandInset label
LatexCommand label
name "sub:arbtree-storage"

\end_inset


\end_layout

\begin_layout Subsubsection
The (entire) data is the key
\end_layout

\begin_layout Standard
To begin the introduction, in this model, the tree serves to store 
\begin_inset Quotes eld
\end_inset

basic
\begin_inset Quotes erd
\end_inset

 elements, e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

integers or strings.
\end_layout

\begin_layout Standard
without doing a deep comparison, e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

integers or strings or any quantity that could be considered atomic.
 While C programmers may not see a string, essentially an array of char,
 as atomic, the special-casing of strings in HXbtree makes them rather undividab
le.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree 
\family typewriter
\series bold
*
\series default
b = HXbtree_init(HXBT_ICMP);
\begin_inset Newline newline
\end_inset

HXbtree_add(b, 
\series bold
reinterpret_cast
\series default
(
\series bold
void *
\series default
, 
\series bold
static_cast
\series default
(
\series bold
long
\series default
, rand())));
\end_layout

\begin_layout Plain Layout
\align center
Not necessarily pretty, but then again a tree was not originally designed
 to support non-pointer data.
 As it stands, it works on many platforms as shown.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Code sample for storing integers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
b = HXbtree_init(HXBT_SCMP);
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "Hello");
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "World");
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Code sample for storing strings (pointers)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
b = HXbtree_init(HXBT_CDATA | HXBT_SCMP);
\begin_inset Newline newline
\end_inset


\series bold
char
\series default
 c[10];
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
unsigned int
\series default
 i;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
for
\series default
 (i = 0; i < 15; ++i)
\family default
 {
\begin_inset Newline newline
\end_inset

        snprintf(c, 
\family typewriter
\series bold
sizeof
\series default
(c), "%u", i);
\begin_inset Newline newline
\end_inset

        HXbtree_add(b, c);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:arbtree-cdata"

\end_inset

Storing strings with automatic duplication
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Storing data this way effectively turns the data structure into a bitmap,
 as all the tree will return when you search for an element is the element
 itself, or nothing.
\end_layout

\begin_layout Standard
String duplication is needed if the data provided by the pointer during
 the call to 
\family typewriter
HXbtree_add
\family default
 may change during the lifetime of the tree, as shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:arbtree-cdata"

\end_inset

.
 Because the buffer will be overwritten in every iteration, having the tree
 only store a pointer would infer problems because the tree would effectively
 be externally changed without updating the tree metadata.
 This is why 
\family typewriter
HXBT_\SpecialChar \-
CDATA
\family default
 needs to be specified so that HXbtree will copy the string to a new memory
 block first before putting the (then new) pointer into the tree.
 Only if you can be sure that the object will not be modified can you omit
 
\family typewriter
HXBT_\SpecialChar \-
CDATA
\family default
.
 What it boils down to is that the primary key (as SQL people call it) may
 not be modified directly, because this would invalidate the tree structure
 and metadata.
 The next storage models will elaborate on this.
\end_layout

\begin_layout Subsubsection
Data with embedded key
\end_layout

\begin_layout Standard
Since it is possible to store any kind of data, non-atomic types such as
 structs are also eligible.
 The only component needed is a comparison function that can tell the order
 or equivalence of two structures.
 For atomic, integer types, this function is internally provided by and
 for HXbtree automatically as is for strings; 
\family typewriter
HXBT_\SpecialChar \-
ICMP
\family default
 and 
\family typewriter
HXBT_\SpecialChar \-
SCMP
\family default
 select these, respectively.
 A very simplistic approach could be:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 point_with_data {
\begin_inset Newline newline
\end_inset

    
\series bold
    int
\series default
 x, y;
\begin_inset Newline newline
\end_inset

        
\family typewriter
\series bold
struct
\series default
 timeval timestamp;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 flags;
\begin_inset Newline newline
\end_inset


\family default
};
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing non-atomic data
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Detached key
\end_layout

\begin_layout Standard
It is possible to detach the key from its data struct.
 The reason to want to do is to associate multiple keys with the same data
 while being memory efficient and to prevent against change anomalies.
 That is, if multiple keys are supposed to point to the same data even if
 the data will be changed (thus all keys associating to it will return the
 new data).
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 point {
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 x, y;
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 timeval timestamp;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 flags;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
to
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 point {
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 x, y;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 point_data {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 timeval timestamp;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 flags;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
When you make use of the feature of associating the same data with multiple
 keys, 
\family typewriter
HXBT_\SpecialChar \-
CDATA
\family default
 cannot be used, and it must be ensured that the data is valid throughout
 the lifetime of the nodes in the tree that refer to it.
\end_layout

\begin_layout Subsection
Constructors
\end_layout

\begin_layout Subsubsection
HXbtree_init
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
HXbtree_init(
\series bold
unsigned int
\series default
 flags, ...);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtree_init
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXbtree_init
\family default
 initializes a new binary tree.
 The bitfield 
\family typewriter
flags
\family default
 can contain the following options:
\end_layout

\begin_layout Description

\family typewriter
HXBT_MAP
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_MAP
\end_layout

\end_inset


\family default
\series default
 This changes the tree semantics to behave like an associative array (key-value
 pairs).
 One of 
\family typewriter
HXBT_\SpecialChar \-
CMPFN
\family default
, 
\family typewriter
HXBT_\SpecialChar \-
SCMP
\family default
 or 
\family typewriter
HXBT_\SpecialChar \-
ICMP
\family default
 must be specified when 
\family typewriter
HXBT_\SpecialChar \-
MAP
\family default
 is selected.
\end_layout

\begin_layout Description

\family typewriter
HXBT_CKEY
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_CKEY
\end_layout

\end_inset


\family default
\series default
 Duplicate the key used for 
\family typewriter
HXbtree_add
\family default
 before inserting it into the tree.
 This must only be used when the object to be added is a C-style string.
\end_layout

\begin_layout Description

\family typewriter
HXBT_CDATA
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_CDATA
\end_layout

\end_inset


\family default
\series default
 Duplicate the data used for 
\family typewriter
HXbtree_add
\family default
 before inserting it into the tree.
 This must only be used when the object to be added is a C-style string.
\end_layout

\begin_layout Description

\family typewriter
HXBT_CMPFN
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_CMPFN
\end_layout

\end_inset


\family default
\series default
 Selects the function that defines the order of elements in the tree.
 This pulls one argument from the varargs stack, which must be a function
 pointer of type 
\family typewriter
\series bold
int
\begin_inset space ~
\end_inset

(*)
\series default
(
\series bold
const void
\begin_inset space ~
\end_inset

*
\series default
, 
\series bold
const void
\begin_inset space ~
\end_inset

*
\series default
, 
\series bold
size_t
\series default
)
\family default
.
 It will acts as a key comparison function for sorting, searching and traversal.
 
\family typewriter
HXBT_\SpecialChar \-
CMPFN
\family default
 takes precedence over 
\family typewriter
HXBT_\SpecialChar \-
SCMP
\family default
, 
\family typewriter
HXBT_\SpecialChar \-
ICMP
\family default
 in regard to the selection of a comparison function.
\end_layout

\begin_layout Description

\family typewriter
HXBT_SCMP
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_SCMP
\end_layout

\end_inset


\family default
\series bold
 
\series default
The relation between keys is given by their string sorting order.
 It is an abbreviation for using 
\family typewriter
HXBT_\SpecialChar \-
CMPFN
\family default
 with 
\family typewriter
strcmp
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXBT_ICMP
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_ICMP
\end_layout

\end_inset


\family default
\series default
 Use a by-value comparison for the keys (
\begin_inset Quotes eld
\end_inset

ICMP
\begin_inset Quotes erd
\end_inset

 = 
\begin_inset Quotes eld
\end_inset

integer compare
\begin_inset Quotes erd
\end_inset

).
 This is useful if you plan on using numbers as keys, which must not be
 dereferenced by HXbtree.
\end_layout

\begin_layout Description

\family typewriter
HXBT_CID
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXBT_CID
\end_layout

\end_inset


\family default
\series default
 This flag instructs the traverser
\begin_inset Foot
status open

\begin_layout Plain Layout
Most people would call it iterator, but traverser stuck with the code.
\end_layout

\end_inset

 to copy not the pointer value, but the string pointed to by it, to its
 internal state, for re-lookup in case the tree changes during traversal.
\begin_inset Newline newline
\end_inset

Details: When the tree is changed during traversal, whereby change here
 does not mean adding or deleting a node, but causing a rebalance in the
 red-black tree as part of an addition or deletion, the traverser state,
 which keeps a path to the currently-visited node, may become invalid.
 The traverser must therefore re-establish this path by walking down to
 the last known node before it can find the node's successor.
 If the node has been deleted and was re-inserted, the address for the key
 string may have changed though the key itself has not.
 In this case, the traverser needs to compare by string key, not value.
 The 
\family typewriter
HXBT_\SpecialChar \-
CID
\family default
 flag can unfortunately not be implicit for 
\family typewriter
HXBT_\SpecialChar \-
SCMP
\family default
, since one can also specify a comparison function of which we do not know
 its characteristics, using 
\family typewriter
HXBT_\SpecialChar \-
CMPFN
\family default
.
 Also, if you can assure that no tree modifications happen during traversal,
 not specifying 
\family typewriter
HXBT_\SpecialChar \-
CID
\family default
 will be faster.
\end_layout

\begin_layout Subsubsection
HXbtree_init2
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
HXbtree_init2(
\series bold
unsigned int
\series default
 flags,
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXbtree_init2
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

    
\series bold
int (*
\series default
k_compare
\series bold
)
\series default
(
\series bold
const void *
\series default
, 
\series bold
const void *
\series default
, 
\series bold
size_t
\series default
),
\begin_inset Newline newline
\end_inset

    
\series bold
void *(*
\series default
k_clone
\series bold
)
\series default
(
\series bold
const void *
\series default
, 
\series bold
size_t
\series default
), 
\series bold
void (*
\series default
k_free
\series bold
)
\series default
(
\series bold
const void *
\series default
),
\begin_inset Newline newline
\end_inset

    
\series bold
void *(*
\series default
d_clone
\series bold
)
\series default
(
\series bold
const void *
\series default
, 
\series bold
size_t
\series default
), 
\series bold
void (*
\series default
d_free
\series bold
)
\series default
(
\series bold
const void *
\series default
));
\end_layout

\begin_layout Standard

\family typewriter
HXbtree_init2
\family default
 is a newer variant that extends 
\family typewriter
HXbtree_init
\family default
 by allowing to specify the size of the key and data struct, so that HXbtree
 can duplicate the key and/or data if 
\family typewriter
HXBT_\SpecialChar \-
CKEY
\family default
 and 
\family typewriter
HXBT_\SpecialChar \-
CDATA
\family default
 is specified.
 By default, it will be using 
\family typewriter
HX_memdup
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_memdup
\end_layout

\end_inset

 and 
\family typewriter
free
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
free
\end_layout

\end_inset

.
 Previously, with 
\family typewriter
HXbtree_init
\family default
, this had to be done by the user as it only supported duplicating strings.
 The function pointers 
\family typewriter
k_clone
\family default
, 
\family typewriter
d_clone
\family default
, 
\family typewriter
k_free
\family default
 and 
\family typewriter
d_free
\family default
 may be used to override the defaults if they are non-
\family typewriter
NULL
\family default
.
 The following flags are supported:
\end_layout

\begin_layout Description

\family typewriter
HXBT_MAP
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_MAP
\end_layout

\end_inset


\family default
 (as described above)
\end_layout

\begin_layout Description

\family typewriter
HXBT_CKEY
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_CKEY
\end_layout

\end_inset


\family default
 (as described above)
\end_layout

\begin_layout Description

\family typewriter
HXBT_CDATA
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_CDATA
\end_layout

\end_inset


\family default
 (as described above)
\end_layout

\begin_layout Description

\family typewriter
HXBT_SKEY
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_SKEY
\end_layout

\end_inset


\family default
 Select string operations 
\family typewriter
HX_strdup
\family default
 and 
\family typewriter
free
\family default
 for the key cloning and release by default.
 The functions can still be overridden by the parameters in the argument
 list.
\end_layout

\begin_layout Description

\family typewriter
HXBT_SDATA
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_SDATA
\end_layout

\end_inset


\family default
 Select string operations for data cloning and release by default.
 The functions can still be overridden by the parameters in the argument
 list.
\end_layout

\begin_layout Description

\family typewriter
HXBT_CID
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXBT_CID
\end_layout

\end_inset


\family default
 (as described above)
\end_layout

\begin_layout Standard
Any other flags, such as 
\family typewriter
HXBT_\SpecialChar \-
SCMP
\family default
 and 
\family typewriter
HXBT_\SpecialChar \-
ICMP
\family default
, are not allowed.
\end_layout

\begin_layout Subsection
Destruction
\end_layout

\begin_layout LyX-Code

\series bold
void
\series default
 HXbtree_free(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtree_free
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
HXbtree_free
\family default
 function will delete the tree and any associated objects.
 If 
\family typewriter
HXBT_\SpecialChar \-
MAP
\begin_inset space ~
\end_inset

| HXBT_\SpecialChar \-
CKEY
\family default
 had been specified during the constructing call to 
\family typewriter
HXbtree_init
\family default
, all keys are freed too, since they were initially duplicated and are owned
 by the tree.
 Conversely, if 
\family typewriter
HXBT_\SpecialChar \-
CDATA
\family default
 was specified, 
\family typewriter
free
\family default
 is called on all data pointers.
 It is therefore important that, by the time 
\family typewriter
HXbtree_del
\family default
 is called, the tree only contains nodes with key and data pointers that
 it actually owns.
\end_layout

\begin_layout Subsection
Adding nodes
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree_node 
\series bold
*
\series default
HXbtree_add(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree, 
\series bold
const void *
\series default
data);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtree_add
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXbtree_node 
\series bold
*
\series default
HXbtree_add(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree,
\begin_inset Newline newline
\end_inset

        
\series bold
const void *
\series default
key, 
\series bold
const void *
\series default
data);
\end_layout

\begin_layout Standard

\family typewriter
HXbtree_add
\family default
 adds a new node to the tree using the given key and/or data.
 When an object is in the tree, only parts may be modified that would not
 change the order of elements.
 If you need to change the key (which may be packed into 
\family typewriter
data
\family default
, see example in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:arbtree-examples-nonassoc"

\end_inset

), you will have to delete the object from the tree and re-insert it.
\end_layout

\begin_layout Standard
On success, a pointer to the newly added node is returned if the insertion
 was successful, or 
\family typewriter
NULL
\family default
 otherwise.
 On error, 
\family typewriter
errno
\family default
 will be set appropriately.
\end_layout

\begin_layout Subsection
Search
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXbtree_node 
\series bold
*
\series default
HXbtree_find(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree, 
\series bold
const void *
\series default
key);
\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXbtree_get(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree, 
\series bold
const void *
\series default
key);
\end_layout

\begin_layout Standard

\family typewriter
HXbtree_find
\family default
 will find the node for the given key.
 The key can be read from the node using 
\family typewriter
node->key
\family default
 or node->skey (convenience alias for 
\family typewriter
key
\family default
, but with a type of 
\family typewriter
const char
\begin_inset space ~
\end_inset

*
\family default
), and the data by using 
\family typewriter
node->data
\family default
 or 
\family typewriter
node->sdata
\family default
.
 
\family typewriter
HXbtree_get
\family default
 will directly return 
\family typewriter
node->data
\family default
 instead of the node itself.
 Since 
\family typewriter
HXbtree_get
\family default
 may legitimately return 
\family typewriter
NULL
\family default
 if 
\family typewriter
NULL
\family default
 was stored in the tree as the data for a given key, only 
\family typewriter
errno
\family default
 will really tell whether the node was found or not; in the latter case,
 
\family typewriter
errno
\family default
 is set to 
\family typewriter
ENOENT
\family default
.
\end_layout

\begin_layout Subsection
Deletion
\end_layout

\begin_layout LyX-Code

\series bold
void *
\series default
HXbtree_del(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree, 
\series bold
const void *
\series default
key);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtree_del
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Delete the node given by 
\family typewriter
key
\family default
 from the tree and return the associated data if the tree does not own the
 data (because if it does own the data, it has to free it, at which point
 it cannot be returned), or 
\family typewriter
NULL
\family default
 otherwise.
\end_layout

\begin_layout Subsection
Traversal
\end_layout

\begin_layout LyX-Code

\series bold
void *
\series default
HXbtrav_init(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
tree);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtrav_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXbtree_node 
\series bold
*
\series default
HXbtraverse(
\series bold
void *
\series default
trav);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtraverse
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXbtrav_free(
\series bold
void *
\series default
trav);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXbtrav_free
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXbtrav_init
\family default
 Initializes a B-tree traverser on the given tree.
 Traversal starts at the left-most node.
\end_layout

\begin_layout Description

\family typewriter
HXbtraverse
\family default
 Returns the next inorder element.
 The tree may be modified during traversal and the traverser will relookup
 the nodes in the tree to restore its state.
 However, for repickup to work, the 
\family typewriter
HXBT_\SpecialChar \-
CID
\family default
 flag to work with non-integer keys.
\end_layout

\begin_layout Description

\family typewriter
HXbtrav_free
\family default
 Frees the storage that the traverser used.
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
The implementation has a theoretical minimum on the maximum number of nodes,
 
\begin_inset Formula $2^{24}=16{,}777{,}216$
\end_inset

.
 A worst-case tree with this many elements already has a height of 48 (
\family typewriter
BT_MAXDEP
\family default
).
 The larger the height is that arbtree is supposed to handle, the more memory
 (linear increase) it needs.
 All functions that build or keep a path reserve memory for 
\family typewriter
BT_MAXDEP
\family default
 nodes; on x86_64 this is 9 bytes per 
\begin_inset Formula $\langle$
\end_inset

node, direction
\begin_inset Formula $\rangle$
\end_inset

 pair, amounting to 432 bytes for path tracking alone.
 It may not sound like a lot to many, but given that kernel people can limit
 their stack usage to 4096 bytes is impressive alone
\begin_inset Foot
status open

\begin_layout Plain Layout
Not always of course.
 Linux kernels are often configured to use an 8K stack because some components
 still use a lot of stack space, but eve 8K is still damn good.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Case-insensitive ordering
\end_layout

\begin_layout Standard
This one is easy:
\end_layout

\begin_layout LyX-Code
b = HXbtree_init(HXBT_MAP | HXBT_CMPFN, strcasecmp);
\end_layout

\begin_layout Subsubsection
Reverse sorting order (
\begin_inset Formula $Z\rightarrow A$
\end_inset

)
\end_layout

\begin_layout Standard
Any function that behaves like 
\family typewriter
strcmp
\family default
 can be used.
 It merely has to return negative when 
\begin_inset Formula $a<b$
\end_inset

, zero on 
\begin_inset Formula $a=b$
\end_inset

, and positive non-zero when 
\begin_inset Formula $a>b$
\end_inset

.
\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 strcmp_rev(
\series bold
const void *
\series default
a, 
\series bold
const void *
\series default
b)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 strcmp(b, a);
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static int
\series default
 strcmp_rev3(
\series bold
const void *
\series default
a, 
\series bold
const void *
\series default
b, 
\series bold
size_t
\series default
 z)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
z is provided for cases when things are raw memory blocks.

\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 strcmp(b, a);
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

b = HXbtree_init(HXBT_MAP | HXBT_CMPFN, strcmp_rev);
\begin_inset Newline newline
\end_inset

b = HXbtree_init2(HXBT_MAP | HXBT_SKEY, strcmp3_rev, NULL, NULL, NULL, NULL);
\end_layout

\begin_layout Subsubsection
Data-only tree
\end_layout

\begin_layout Standard
It is unbeknown if this usage is really that often used.
 I mean, you can abuse a self-balancing tree in a number of ways, for example
 to sort elements.
\end_layout

\begin_layout LyX-Code
b = HXbtree_init(HXBT_SCMP);
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "cheese");
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "cake");
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "fruit");
\begin_inset Newline newline
\end_inset

HXbtree_add(b, "cake");
\end_layout

\begin_layout Standard
Now you have the elements in the tree, and traversing it will return them
 in ordered fashion.
 It is my gut feeling though, that inserting the elements into a HXdeque
 instead, converting that to a zvec and then running 
\family typewriter
qsort
\family default
 is faster.
\end_layout

\begin_layout Standard
Another application that comes to mind is a very sparse bitmap:
\end_layout

\begin_layout LyX-Code
b = HXbtree_init(HXBT_ICMP);
\begin_inset Newline newline
\end_inset


\series bold
/* 
\family roman
\series default
\shape italic
Grab six random numbers from 1..49
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset


\series bold
for
\series default
 (i = 0; i < 6; ++i)
\begin_inset Newline newline
\end_inset

        HXbtree_add(b, (
\series bold
const void *
\series default
)HX_irand(1, 50));
\end_layout

\begin_layout Subsubsection
Non-associative tree
\begin_inset CommandInset label
LatexCommand label
name "sub:arbtree-examples-nonassoc"

\end_inset


\end_layout

\begin_layout Standard
Keys can be stored together with their actual data, especially when they
 are not just composed of a single integer or string, bundling them with
 their data may make sense:
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 package {
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
name;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 major_version;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 minor_version;
\begin_inset Newline newline
\end_inset

        
\series bold
char
\series default
 notes
\series bold
[
\series default
64
\series bold
]
\series default
;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static int
\series default
 package_cmp(
\series bold
const void *
\series default
a, 
\series bold
const void *
\series default
b)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
const struct
\series default
 package 
\series bold
*
\series default
p = a, 
\series bold
*
\series default
q = b;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 ret;
\begin_inset Newline newline
\end_inset

        ret = strcmp(p->name, q->name);
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (ret != 0)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 ret;
\begin_inset Newline newline
\end_inset

        ret = p->major_version - q->major_version;
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (ret != 0)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 ret;
\begin_inset Newline newline
\end_inset

        ret = p->minor_version - q->minor_version;
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (ret != 0)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 ret;
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 0;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

HXbtree_init(HXBT_CMPFN, myobject_cmp);
\end_layout

\begin_layout Standard
In this case, the key consists of 
\begin_inset Formula $\langle$
\end_inset

package name, major version, minor version
\begin_inset Formula $\rangle$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Doubly-linked list
\begin_inset CommandInset label
LatexCommand label
name "sec:deque"

\end_inset


\end_layout

\begin_layout Standard
HXdeque is a data structure for a doubly-linked non-circular 
\family typewriter
NULL
\family default
-sentineled list.
 Despite being named a deque, which is short for double-ended queue, and
 which may be implemented using an array, HXdeque is in fact using a linked
 list to provide its deque functionality.
 Furthermore, a dedicated root structure and decidated node structures with
 indirect data referencing are used.
\end_layout

\begin_layout Subsection
Structural definition
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/deque.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/deque.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXdeque {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXdeque
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
first, 
\series bold
*
\series default
last;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 items;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
ptr;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXdeque_node {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXdeque_node
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
next, 
\series bold
*
\series default
prev;
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
parent;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
ptr;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
The 
\family typewriter
ptr
\family default
 member in 
\family typewriter
struct HXdeque
\family default
 provides room for an arbitrary custom user-supplied pointer.
 
\family typewriter
items
\family default
 will reflect the number of elements in the list, and must not be modified.
 
\family typewriter
first
\family default
 and 
\family typewriter
last
\family default
 provide entrypoints to the list's ends.
\end_layout

\begin_layout Standard

\family typewriter
ptr
\family default
 within 
\family typewriter
struct HXdeque_node
\family default
 is the pointer to the user's data.
 It may be modified and used at will by the user.
 See example section
\begin_inset space ~
\end_inset

.
\end_layout

\begin_layout Subsection
Constructor, destructors
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
HXdeque_init(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXdeque_free(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_free
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXdeque_genocide(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_genocide
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
void **
\series default
HXdeque_to_vec(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq, 
\series bold
unsigned int *
\series default
num);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_to_vec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To allocate a new empty list, use 
\family typewriter
HXdeque_init
\family default
.
 
\family typewriter
HXdeque_free
\family default
 will free the list (including all nodes owned by the list), but not the
 data pointers.
\end_layout

\begin_layout Standard

\family typewriter
HXdeque_genocide
\family default
 is a variant that will not only destroy the list, but also calls 
\family typewriter
free()
\family default
 on all stored data pointers.
 This puts a number of restrictions on the characteristics of the list:
 all data pointers must have been obtained with 
\family typewriter
malloc
\family default
 , 
\family typewriter
calloc
\family default
 or 
\family typewriter
realloc
\family default
 before, and no data pointer must exist twice in the list.
 The function is more efficient than an open-coded loop over all nodes calling
 
\family typewriter
HXdeque_del
\family default
.
\end_layout

\begin_layout Standard
To convert a linked list to a 
\family typewriter
NULL
\family default
-terminated array, 
\family typewriter
HXdeque_to_vec
\family default
 can be used.
 If 
\family typewriter
num
\family default
 is not 
\family typewriter
NULL
\family default
, the number of elements excluding the 
\family typewriter
NULL
\family default
 sentinel, is stored in 
\family typewriter
*num
\family default
.
\end_layout

\begin_layout Subsection
Addition and removal
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
HXdeque_push(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq, 
\series bold
void *
\series default
ptr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_push
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
HXdeque_unshift(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq, 
\series bold
void *
\series default
ptr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_unshift
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXdeque_pop(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_pop
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXdeque_shift(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_shift
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
HXdeque_move(
\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
target,
\begin_inset Newline newline
\end_inset

                             
\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
node);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_move
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXdeque_del(
\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
node);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_del
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXdeque_\SpecialChar \-
push
\family default
 and 
\family typewriter
HXdeque_\SpecialChar \-
unshift
\family default
 add the data item in a new node at the end (
\begin_inset Quotes eld
\end_inset

push
\begin_inset Quotes erd
\end_inset

) or as the new first element (
\begin_inset Quotes eld
\end_inset

unshift
\begin_inset Quotes erd
\end_inset

 as Perl calls it), respectively.
 The functions will return the new node on success, or 
\family typewriter
NULL
\family default
 on failure and 
\family typewriter
errno
\family default
 will be set.
 The node is owned by the list.
\end_layout

\begin_layout Standard

\family typewriter
HXdeque_\SpecialChar \-
pop
\family default
 and 
\family typewriter
HXdeque_\SpecialChar \-
shift
\family default
 remove the last (
\begin_inset Quotes eld
\end_inset

pop
\begin_inset Quotes erd
\end_inset

) or first (
\begin_inset Quotes eld
\end_inset

shift
\begin_inset Quotes erd
\end_inset

) node, respectively, and return the data pointer that was stored in the
 data.
\end_layout

\begin_layout Standard

\family typewriter
HXdeque_\SpecialChar \-
move
\family default
 will unlink a node from its list, and reinsert it after the given target
 node, which may be in a different list.
\end_layout

\begin_layout Standard
Deleting a node is accomplished by calling 
\family typewriter
HXdeque_del
\family default
 on it.
 The data pointer stored in the node is not freed, but returned.
\end_layout

\begin_layout Subsection
Iteration
\end_layout

\begin_layout Standard
Iterating over a HXdeque linked list is done manually and without additional
 overhead of function calls:
\end_layout

\begin_layout LyX-Code

\series bold
const struct
\series default
 HXdeque_node 
\series bold
*
\series default
node;
\begin_inset Newline newline
\end_inset


\series bold
for
\series default
 (node = dq->first; node != NULL; node = node->next)
\begin_inset Newline newline
\end_inset

        do_something(node->ptr);
\end_layout

\begin_layout Subsection
Searching
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXdeque_node 
\series bold
*
\series default
HXdeque_find(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq, 
\series bold
const void *
\series default
ptr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_find
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXdeque_get(
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq, 
\series bold
void *
\series default
ptr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXdeque_get
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXdeque_find
\family default
 searches for the node which contains 
\family typewriter
ptr
\family default
, and does so by beginning at the start of the list.
 If no node is found, 
\family typewriter
NULL
\family default
 is returned.
 If a pointer is more than once in the list, any node may be returned.
\end_layout

\begin_layout Standard

\family typewriter
HXdeque_get
\family default
 will further return the data pointer stored in the node
\begin_inset space ~
\end_inset

--- however, since that is just what the 
\family typewriter
ptr
\family default
 argument is, the function practically only checks for existence of 
\family typewriter
ptr
\family default
 in the list.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard

\series bold
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <stdlib.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <string.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/defs.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/deque.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <pwd.h>
\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Newline newline
\end_inset

int
\series default
 main(
\series bold
void
\series default
)
\begin_inset Newline newline
\end_inset

{
\series bold

\begin_inset Newline newline
\end_inset


\series default
        
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq = HXdeque_init();
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 passwd *pw;
\begin_inset Newline newline
\end_inset

        
\family typewriter
\series bold
unsigned int
\series default
 elem;
\begin_inset Newline newline
\end_inset

        
\series bold
char **
\series default
users;
\family default

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        setpwent();
\begin_inset Newline newline
\end_inset

        
\series bold
while
\series default
 ((pw = getpwent()) != NULL)
\begin_inset Newline newline
\end_inset

                HXdeque_push(dq, HX_strdup(pw->pw_name));
\begin_inset Newline newline
\end_inset

        endpwent();
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        users = 
\series bold
reinterpret_cast
\series default
(
\series bold
char **
\series default
, HXdeque_to_vec(dq, &elem));
\begin_inset Newline newline
\end_inset

        HXdeque_free(dq);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        qsort(users, elem, 
\series bold
sizeof
\series default
(*users), 
\series bold
static_cast
\series default
(
\series bold
void *
\series default
, strcmp));
\begin_inset Newline newline
\end_inset

        return 0;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example use of HXdeque to store and sort a list
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example, all usernames are obtained from NSS, and put into a list.
 
\family typewriter
HX_strdup
\family default
 is used, because 
\family typewriter
getpwent
\family default
 will overwrite the buffer it uses to store its results.
 The list is then converted to an array, and the list is freed (because
 it is not need it anymore).
 
\family typewriter
HXdeque_genocide
\family default
 must not be used here, because it would free all the data pointers (strings
 here) that were just inserted into the list.
 Finally, the list is sorted using the well-known 
\family typewriter
qsort
\family default
 function.
 Because 
\family typewriter
strcmp
\family default
 takes two 
\family typewriter
const char
\begin_inset space ~
\end_inset

*
\family default
 arguments, but 
\family typewriter
qsort
\family default
 mandates a function taking two 
\family typewriter
const void
\begin_inset space ~
\end_inset

*
\family default
, a cast can be used to silence the compiler.
 This only works because we know that the array consists of a bunch of 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 pointers, so 
\family typewriter
strcmp
\family default
 will work.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Inline doubly-linked list
\begin_inset CommandInset label
LatexCommand label
name "sec:list"

\end_inset


\end_layout

\begin_layout Standard
Classical linked-list implementations, such as HXdeque, either store the
 actual data within a node, or indirectly through a pointer, but the 
\begin_inset Quotes eld
\end_inset

inline doubly-linked list
\begin_inset Quotes erd
\end_inset

 instead does it reverse and has the list head within the data structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 package_desc {
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
package_name;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 version;
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 classic_direct_node {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 classic_direct_node 
\series bold
*
\series default
next, 
\series bold
*
\series default
prev;
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 package_desc direct_data;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 classic_indirect_node {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 classic_indirect_node 
\series bold
*
\series default
next, 
\series bold
*
\series default
prev;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
indirect_data;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Classic linked-list implementations with direct/indirect data blocks.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 package_desc {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXlist_head list;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
package_name;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 version;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
List head (next,prev pointers) inlined into the data block
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At first glance, an inline list does not look much different from 
\family typewriter
struct classic_direct_data
\family default
, it is mostly a viewpoint decision which struct is in the foreground.
\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/list.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/list.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXlist_head {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXlist_head
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
All fields considered private
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

HXLIST_HEAD_INIT(name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXLIST_HEAD_INIT
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

HXLIST_HEAD(name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXLIST_HEAD
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXlist_init(
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
list);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXlist_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXlist_add(
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
list, 
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
elem);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXlist_add
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXlist_add_tail(
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
list, 
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
elem);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXlist_add_tail
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXlist_del(
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
element);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXlist_del
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXLIST_HEAD_INIT
\family default
 This macro expands to the static initializer for a list head.
\end_layout

\begin_layout Description

\family typewriter
HXLIST_HEAD
\family default
 This macro expands to the definition of a list head (i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset


\family typewriter
struct HXlist_head name = HXLIST_HEAD_INIT;
\family default
)
\end_layout

\begin_layout Description

\family typewriter
HXlist_init
\family default
 Initializes the list head.
 This function is generally used when the list head is on the heap where
 the static initializer cannot be used.
\end_layout

\begin_layout Description

\family typewriter
HXlist_add
\family default
 Adds 
\family typewriter
elem
\family default
 to the front of the list.
\end_layout

\begin_layout Description

\family typewriter
HXlist_add_tail
\family default
 Adds 
\family typewriter
elem
\family default
 to the end of the list.
\end_layout

\begin_layout Description

\family typewriter
HXlist_del
\family default
 Deletes the given element from the list.
\end_layout

\begin_layout Subsection
When to use HXdeque/HXlist
\end_layout

\begin_layout Standard
The choice whether to use HXdeque or HXlist/HXclist depends on whether one
 wants the list head handling on the developer or on the library.
 Especially for 
\begin_inset Quotes eld
\end_inset

atomic
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 data, it might be easier to just let HXdeque do the management.
 Compare the following two code examples to store strings:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
int
\series default
 main(
\family typewriter
\series bold
int
\series default
 argc, 
\series bold
const char **
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXdeque 
\series bold
*
\series default
dq = HXdeque_init();
\begin_inset Newline newline
\end_inset

        
\series bold
while
\series default
 (--argc)
\begin_inset Newline newline
\end_inset

                 HXdeque_push(dq, ++argv);
\begin_inset Newline newline
\end_inset

        
\family default
\series bold
return
\family typewriter
\series default
 0;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing strings in a HXdeque
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 element {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXlist_head list;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\family typewriter
\series default
data;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 main(
\series bold
int
\series default
 main, 
\series bold
const char **
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        HXLIST_HEAD(lh);
\begin_inset Newline newline
\end_inset

        
\series bold
while
\series default
 (--argc) {
\begin_inset Newline newline
\end_inset

                
\series bold
struct
\series default
 element 
\series bold
*
\series default
e = malloc(
\family default
\series bold
sizeof
\family typewriter
\series default
(*e));
\begin_inset Newline newline
\end_inset

                e->data = *++argv;
\begin_inset Newline newline
\end_inset

                HXlist_init(&e->list);
\begin_inset Newline newline
\end_inset

                HXlist_add_tail(&e->list);
\begin_inset Newline newline
\end_inset

        }
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 0;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing strings in a HXlist
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These examples assume that 
\family typewriter
argv
\family default
 is persistent, which, for the sample, is true.
\end_layout

\begin_layout Standard
With HXlist, one needs to have a struct with a HXlist_head in it, and if
 one does not already have such a struct
\begin_inset space ~
\end_inset

---e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

by means of wanting to store more than just one value
\begin_inset space ~
\end_inset

--- one will need to create it first, as shown, and this may lead to an
 expansion of code.
\end_layout

\begin_layout Standard
This however does not mean that HXlist is the better solution over HXdeque
 for data already available in a struct.
 As each struct has a list_head that is unique to the node, it is not possible
 to share this data.
 Trying to add a HXlist_head to another list is not going to end well, while
 HXdeque has no problem with this as list heads are detached from the actual
 data in HXdeque.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
struct
\series default
 point p = {15, 30};
\begin_inset Newline newline
\end_inset

HXdeque_push(dq, &p);
\begin_inset Newline newline
\end_inset

HXdeque_push(dq, &p);
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Data can be added multiple times in a HXdeque without ill effects
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To support this, an extra allocation is needed on the other hand.
 In a HXlist, to store 
\begin_inset Formula $n$
\end_inset

 elements of compound data (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
struct point
\family default
), 
\begin_inset Formula $n$
\end_inset

 allocations are needed, assuming the list head is a stack object, and the
 points are not.
 HXdeque will need at least 
\begin_inset Formula $2n+1$
\end_inset

 allocations, 
\begin_inset Formula $n$
\end_inset

 for the nodes, 
\begin_inset Formula $n$
\end_inset

 for the points and another for the head.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Counted inline doubly-linked list
\begin_inset CommandInset label
LatexCommand label
name "sec:clist"

\end_inset


\end_layout

\begin_layout Standard
clist is the inline doubly-linked list from chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:list"

\end_inset

, extended by a counter to retrieve the number of elements in the list in
 
\begin_inset Formula $\mathcal{O}\left(1\right)$
\end_inset

 time.
 This is also why all operations always require the list head.
 For traversal of clists, use the corresponding HXlist macro.
\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/clist.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/clist.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXclist_head {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXclist_head
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
public readonly:
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 items;
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
Undocumented fields are considered 
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset


\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

HXCLIST_HEAD_INIT(name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXCLIST_HEAD_INIT
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

HXCLIST_HEAD(name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXCLIST_HEAD
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXclist_init(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXclist_unshift(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head, 
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
new_node);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_unshift
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXclist_push(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head, 
\series bold
struct
\series default
 HXlist_head 
\series bold
*
\series default
new_node);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_push
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
type
\series default
 HXclist_pop(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head, 
\series bold
type
\series default
, member);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_pop
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
type
\series default
 HXclist_shift(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head, 
\series bold
type
\series default
, member);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_shift
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXclist_del(
\series bold
struct
\series default
 HXclist_head 
\series bold
*
\series default
head, 
\series bold
struct 
\series default
HXlist_chead 
\series bold
*
\series default
node);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXclist_del
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXCLIST_HEAD_INIT
\family default
 Macro that expands to the static initializer for a clist.
\end_layout

\begin_layout Description

\family typewriter
HXCLIST_HEAD
\family default
 Macro that expands to the definition of a clist head, with initialization.
\end_layout

\begin_layout Description

\family typewriter
HXclist_init
\family default
 Initializes a clist.
 This function is generally used when the head has been allocated from the
 heap.
\end_layout

\begin_layout Description

\family typewriter
HXclist_unshift
\family default
 Adds the node to the front of the list.
\end_layout

\begin_layout Description

\family typewriter
HXclist_push
\family default
 Adds the node to the end of the list.
\end_layout

\begin_layout Description

\family typewriter
HXclist_pop
\family default
 Removes the last node in the list and returns it.
\end_layout

\begin_layout Description

\family typewriter
HXclist_shift
\family default
 Removes the first node in the list and returns it.
\end_layout

\begin_layout Description

\family typewriter
HXclist_del
\family default
 Deletes the node from the list.
\end_layout

\begin_layout Standard
The list count in the clist head is updated whenever a modification is done
 on the clist through these functions.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Strings and memory
\end_layout

\begin_layout Section
String operations
\begin_inset CommandInset label
LatexCommand label
name "sec:strings"

\end_inset


\end_layout

\begin_layout Standard
Some string functions are merely present in libHX because they are otherwise
 unportable; some are only in the C libraries of the BSDs, some only in
 GNU libc.
\end_layout

\begin_layout Subsection
Locating chars
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strbchr(
\series bold
const char *
\series default
start, 
\series bold
const char *
\series default
now, 
\series bold
char
\series default
 delimiter);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_strbchr
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
size_t
\series default
 HX_strrcspn(
\series bold
const char *
\series default
s, 
\series bold
const char *
\series default
reject);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_strccspn
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_strbchr
\family default
 Searches the character specified by 
\family typewriter
delimiter
\family default
 in the range from 
\family typewriter
now
\family default
 to 
\family typewriter
start
\family default
.
 It works like 
\family typewriter
strrchr
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
strrchr
\end_layout

\end_inset

, but begins at 
\family typewriter
now
\family default
 rather than the end of the string.
\end_layout

\begin_layout Description

\family typewriter
HX_strrcspn
\family default
 Works like 
\family typewriter
strcspn
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
strcspn
\end_layout

\end_inset

, but processes the string from end to start.
\end_layout

\begin_layout Subsection
Extraction
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_basename(
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_basename
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_basename_safe(
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_basename_safe
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_dirname(
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_dirname
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strmid(
\series bold
const char *
\series default
s, 
\series bold
long
\series default
 offset, 
\series bold
long
\series default
 length);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strmid
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_basename
\family default
 Returns a pointer to the basename portion of the supplied path 
\family typewriter
s
\family default
.
 The result must not be freed.
 The input string must not have any trailing slashes
\begin_inset Foot
status open

\begin_layout Plain Layout
This was a 
\begin_inset Quotes eld
\end_inset

design
\begin_inset Quotes erd
\end_inset

 choice
\begin_inset space ~
\end_inset

--- stripping slashes at the library level would require an allocation,
 and having slashes does not seem to happen that often.
 Even if there are slashes in a string, the caller often has more knowledge
 about the exact string and can just replace them by NULs.
\end_layout

\end_inset

.
 A possible use for this function is, for example, to derive a logging prefix
 from 
\family typewriter
argv[0]
\family default
.
 If somebody passed an empty string as 
\family typewriter
argv[0]
\family default
 that would surely be odd, and 
\family typewriter
HX_basename_exact
\family default
 giving a 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 in that case over 
\family typewriter
HX_basename
\family default
 giving 
\begin_inset Quotes eld
\end_inset


\backslash
0
\begin_inset Quotes erd
\end_inset

 would not make much of a difference for logging.
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 main(
\series bold
int
\series default
 argc, 
\series bold
const char **
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (foo())
\end_layout

\begin_layout LyX-Code
                fprintf(stderr, "%s: Special condition occurred.
\backslash
n",
\begin_inset Newline newline
\end_inset

                        HX_basename(argv[0]));
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 0;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Description

\family typewriter
HX_basename_exact
\family default
 The accurate and safe version of 
\family typewriter
HX_basename
\family default
 that deals with the root directory and other trailing slashes correctly
 and produces the same result as 
\family typewriter
dirname
\family default
(3).
 It returns a pointer to a newly-allocated string that must be freed when
 done using.
 
\family typewriter
NULL
\family default
 may be returned in case of an allocation error.
\end_layout

\begin_layout Description

\family typewriter
HX_dirname
\family default
 Returns a pointer to a new string that contains the directory name portion
 (everything except basename).
 When done using the string, it must be freed to avoid memory leaks.
\end_layout

\begin_layout Description

\family typewriter
HX_strmid
\family default
 Extract a substring of 
\family typewriter
length
\family default
 characters from 
\family typewriter
s
\family default
, beginning at 
\family typewriter
offset
\family default
.
 If 
\family typewriter
offset
\family default
 is negative, counting beings from the end of the string; 
\begin_inset Formula $-1$
\end_inset

 is the last character (not the 
\family typewriter
'
\backslash
0'
\family default
 byte).
 If 
\family typewriter
length
\family default
 is negative, it will leave out that many characters off the end.
 The function returns a pointer to a new string, and the user has to free
 it.
\end_layout

\begin_layout Subsection
In-place transformations
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_chomp(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_chomp
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
size_t
\series default
 HX_strltrim(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strltrim
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strlower(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strlower
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strrev(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strrev
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
size_t
\series default
 HX_strrtrim(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strrtrim
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strupper(
\series bold
char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strupper
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_chomp
\family default
 Removes the characters 
\family typewriter
'
\backslash
r'
\family default
 and 
\family typewriter
'
\backslash
n'
\family default
 from the right edge of the string.
 Returns the original argument.
\end_layout

\begin_layout Description

\family typewriter
HX_strltrim
\family default
 Trim all whitespace (characters on which 
\family typewriter
isspace
\family default
(3) return true) on the left edge of the string.
 Returns the number of characters that were stripped.
\end_layout

\begin_layout Description

\family typewriter
HX_strlower
\family default
 Transforms all characters in the string 
\family typewriter
s
\family default
 into lowercase using 
\family typewriter
tolower
\family default
(3).
 Returns the original argument.
\end_layout

\begin_layout Description

\family typewriter
HX_strrev
\family default
 Reverse the string in-place.
 Returns the original argument.
\end_layout

\begin_layout Description

\family typewriter
HX_strrtrim
\family default
 Trim all whitespace on the right edge of the string.
 Returns the number of characters that were stripped.
\end_layout

\begin_layout Description

\family typewriter
HX_strupper
\family default
 Transforms all characters in the string 
\family typewriter
s
\family default
 into uppercase using 
\family typewriter
toupper
\family default
(3).
 Returns the original argument.
\end_layout

\begin_layout Subsection
Tokenizing
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char **
\series default
HX_split(
\series bold
const char *
\series default
s, 
\series bold
const char *
\series default
delimiters, 
\series bold
size_t *
\series default
fields, 
\series bold
int
\series default
 max);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_split
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char **
\series default
HX_split4(
\series bold
char *
\series default
s, 
\series bold
const char *
\series default
delimiters, 
\series bold
int *
\series default
fields, 
\series bold
int
\series default
 max);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_split4
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_split5(
\series bold
char *
\series default
s, 
\series bold
const char *
\series default
delimiters, 
\series bold
int
\series default
 max, 
\series bold
char **
\series default
stack);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_split5
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strsep(
\series bold
char **
\series default
sp, 
\series bold
const char *
\series default
delimiters);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strsep
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strsep2(
\series bold
char **
\series default
sp, 
\series bold
const char *
\series default
dstr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strsep2
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_split
\family default
 Split the string 
\family typewriter
s
\family default
 on any characters from the 
\begin_inset Quotes eld
\end_inset


\family typewriter
delimiters
\family default

\begin_inset Quotes erd
\end_inset

 string.
 Both the substrings and the array holding the pointers to these substrings
 will be allocated as required; the original string is not modified.
 If 
\family typewriter
max
\family default
 is larger than zero, produces no more than 
\family typewriter
max
\family default
 fields.
 If 
\family typewriter
fields
\family default
 is not 
\family typewriter
NULL
\family default
, the number of elements produced will be stored in 
\family typewriter
*fields
\family default
.
 The result is a 
\family typewriter
NULL
\family default
-terminated array of 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
, and the user needs to free it when done with it, using 
\family typewriter
HX_zvecfree
\family default
 or equivalent.
\end_layout

\begin_layout Description

\family typewriter
HX_split4
\family default
 Split the string 
\family typewriter
s
\family default
 in-place on any characters from the 
\begin_inset Quotes eld
\end_inset


\family typewriter
delimiters
\family default

\begin_inset Quotes erd
\end_inset

 string.
 The array that will be holding the pointers to the substrings will be allocated
 and needs to be freed by the user, using 
\family typewriter
free
\family default
(3).
 The 
\family typewriter
fields
\family default
 and 
\family typewriter
max
\family default
 arguments work as with 
\family typewriter
HX_split
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HX_split5
\family default
 Split the string 
\family typewriter
s
\family default
 in-place on any characters from the 
\begin_inset Quotes eld
\end_inset


\family typewriter
delimiters
\family default

\begin_inset Quotes erd
\end_inset

 string.
 The array for the substring pointers must be provided by the user through
 the 
\family typewriter
stack
\family default
 argument.
 
\family typewriter
max
\family default
 must be the number of elements in the array or less.
 The array will not be 
\family typewriter
NULL
\family default
-terminated
\begin_inset Foot
status open

\begin_layout Plain Layout
An implementation may however decide to put NULL in the unassigned fields,
 but this is implementation and situation-specific.
 Do not rely on it.
\end_layout

\end_inset

.
 The number of fields produced is returned.
\end_layout

\begin_layout Description

\family typewriter
HX_strsep
\family default
 Extract tokens from a string.
\begin_inset Newline newline
\end_inset

This implementation of 
\family typewriter
strsep
\family default
 has been added since the function is non-standard (according to the manpage,
 conforms to BSD4.4 only) and may not be available on every operating system.
\begin_inset Newline newline
\end_inset

This function extracts tokens, separated by one of the characters in 
\family typewriter
delimiters
\family default
.
 The string is modified in-place and thus must be writable.
 The delimiters in the string are then overwritten with 
\family typewriter
'
\backslash
0'
\family default
, 
\family typewriter
*sp
\family default
 is advanced to the character after the delimiter, and the original pointer
 is returned.
 After the final token, 
\family typewriter
strsep
\family default
 will return 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HX_strsep2
\family default
 Like 
\family typewriter
HX_strsep
\family default
, but 
\family typewriter
dstr
\family default
 is not an array of delimiting characters, but an entire substring that
 acts as a delimiter.
\end_layout

\begin_layout Subsection
Size-bounded string ops
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strlcat(
\series bold
char *
\series default
dest, 
\series bold
const char *
\series default
src, 
\series bold
size_t
\series default
 length);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strlcat
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strlcpy(
\series bold
char *
\series default
dest, 
\series bold
const char *
\series default
src, 
\series bold
size_t
\series default
 length);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strlcpy
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strlncat(
\series bold
char *
\series default
dest, 
\series bold
const char *
\series default
src, 
\series bold
size_t
\series default
 dlen, 
\series bold
size_t
\series default
 slen);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strlncat
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HX_strlcat
\family default
 and 
\family typewriter
HX_strlcpy
\family default
 provide implementations of the BSD-originating 
\family typewriter
strlcat
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
strlcat
\end_layout

\end_inset

 and 
\family typewriter
strlcpy
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
strlcpy
\end_layout

\end_inset

.
 
\family typewriter
strlcat
\family default
 and 
\family typewriter
strlcpy
\family default
 are less error-prone variants for 
\family typewriter
strncat
\family default
 and 
\family typewriter
strncpy
\family default
 as they always take the length of the entire buffer specified by 
\family typewriter
dest
\family default
, instead of just the length that is to be written.
 The functions guarantee that the buffer is 
\family typewriter
'
\backslash
0'
\family default
-terminated.
\end_layout

\begin_layout Subsection
Allocation-related
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HX_memdup(
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 length);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_memdup
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
HX_strdup(
\series bold
const char *
\series default
str);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strdup
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\family typewriter
\series bold
char *
\series default
HX_strclone(
\series bold
char **
\series default
pa, 
\series bold
const char *
\series default
pb);
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_strclone
\end_layout

\end_inset


\end_layout

\end_inset


\series default

\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Newline newline
\end_inset

#ifdef
\series default
 __cplusplus
\begin_inset Newline newline
\end_inset


\series bold
template<typename type> type
\series default
 HX_memdup(
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 length);
\begin_inset Newline newline
\end_inset


\series bold
#endif
\end_layout

\begin_layout Description

\family typewriter
HX_memdup
\family default
 Duplicates 
\family typewriter
length
\family default
 bytes from the memory area pointed to by 
\family typewriter
ptr
\family default
 and returns a pointer to the new memory block.
\end_layout

\begin_layout Description

\family typewriter
HX_strdup
\family default
 Duplicates the string.
 The function is equivalent to 
\family typewriter
strdup
\family default
, but the latter may not be available on all platforms.
\end_layout

\begin_layout Description

\family typewriter
HX_strclone
\family default
 Copies the string pointed to by 
\family typewriter
pb
\family default
 into 
\family typewriter
*pa
\family default
.
 If 
\family typewriter
*pa
\family default
 was not 
\family typewriter
NULL
\family default
 by the time 
\family typewriter
HX_strclone
\family default
 was called, the string is freed before a new one is allocated.
 The function returns 
\family typewriter
NULL
\family default
 and sets 
\family typewriter
errno
\family default
 to 
\family typewriter
EINVAL
\family default
 if 
\family typewriter
pb
\family default
 is 
\family typewriter
NULL
\family default
 (this way it can be freed), or, if 
\family typewriter
malloc
\family default
 fails, returns 
\family typewriter
NULL
\family default
 and leaves 
\family typewriter
errno
\family default
 at what 
\family typewriter
malloc
\family default
 set it to.
\begin_inset Newline newline
\end_inset

The use of this function is deprecated, albeit no replacement is proposed.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Using HX_split5
\begin_inset CommandInset label
LatexCommand label
name "sub:string-ex-HX_split5"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HX_split5
\family default
, where the 
\begin_inset Quotes eld
\end_inset

5
\begin_inset Quotes erd
\end_inset

 should be interpreted (with a bit of imagination and the knowledge of leetspeak
) as an 
\begin_inset Quotes eld
\end_inset

S
\begin_inset Quotes erd
\end_inset

 for stack, as 
\family typewriter
HX_split5
\family default
 is often used only with on-stack variables and where the field count of
 interest is fixed, as the example for parsing 
\family typewriter
/etc/passwd
\family default
 shows:
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
field[8];
\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
line = NULL;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 (HX_getl(&line, fp) != NULL) {
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (HX_split5(line, ":", ARRAY_SIZE(field), field) < 7) {
\begin_inset Newline newline
\end_inset

                fprintf(stderr, "That does not look like a valid line.
\backslash
n");
\begin_inset Newline newline
\end_inset

                
\series bold
continue
\series default
;
\begin_inset Newline newline
\end_inset

        }
\begin_inset Newline newline
\end_inset

        printf("Username: %s
\backslash
n", field[0]);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsubsection
Using HX_split4
\end_layout

\begin_layout Standard
Where the number of fields is not previously known and/or estimatable, but
 the string can be modified in place, one uses 
\family typewriter
HX_split4
\family default
 as follows:
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <errno.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 (HX_getl(&line, fp) != NULL) {
\begin_inset Newline newline
\end_inset

        
\series bold
char **
\series default
field = HX_split4(line, ":", NULL, 0);
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (field == NULL) {
\begin_inset Newline newline
\end_inset

                fprintf(stderr, "Badness! %s
\backslash
n", strerror(errno));
\begin_inset Newline newline
\end_inset

                
\series bold
break
\series default
;
\begin_inset Newline newline
\end_inset

        }
\begin_inset Newline newline
\end_inset

        printf("Username: %s
\backslash
n", field[0]);
\begin_inset Newline newline
\end_inset

        free(field);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsubsection
Using HX_split
\end_layout

\begin_layout Standard
Where the string is not modifiable in-place, one has to resort to using
 the full-fledged 
\family typewriter
HX_split
\family default
 that allocates space for each substring.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <errno.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 (HX_getl(&line, fp) != NULL) {
\begin_inset Newline newline
\end_inset

        
\series bold
char **
\series default
field = HX_split(line, ":", NULL, 0);
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (field == NULL) {
\begin_inset Newline newline
\end_inset

                fprintf(stderr, "Badness.
 %s
\backslash
n", strerror(errno));
\begin_inset Newline newline
\end_inset

                break;
\begin_inset Newline newline
\end_inset

        }
\begin_inset Newline newline
\end_inset

        printf("Username: %s
\backslash
n", field[0]);
\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
Suppose 
\begin_inset Quotes eld
\end_inset

callme
\begin_inset Quotes erd
\end_inset

 needs the original string
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        callme(line);
\begin_inset Newline newline
\end_inset

        HX_zvecfree(field);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsubsection
Using HX_strsep
\end_layout

\begin_layout Standard

\family typewriter
HX_strsep
\family default
 provides for thread- and reentrant-safe tokenizing a string where strtok
 from the C standard would otherwise fail.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char
\series default
 line
\series bold
[]
\series default
 = "root:x:0:0:root:/root:/bin/bash";
\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
wp, 
\series bold
*
\series default
p;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

wp = line;
\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 ((p = HX_strsep(&wp, ":")) != NULL)
\begin_inset Newline newline
\end_inset

        printf("%s
\backslash
n", p)
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Memory containers
\begin_inset CommandInset label
LatexCommand label
name "sec:mc"

\end_inset


\end_layout

\begin_layout Standard
The HXmc series of functions provide scripting-like semantics for strings,
 especially automatically resizing the buffer on demand.
 They can also be used to store a binary block of data together with its
 length.
 (Hence the name: mc = memory container.)
\end_layout

\begin_layout Standard
The benefit of using the HXmc functions is that one does not have to meticulousl
y watch buffer and string sizes anymore.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Paragraph
/* Step
\begin_inset space ~
\end_inset

1 */
\end_layout

\begin_layout LyX-Code

\series bold
char
\series default
 buf
\series bold
[
\family roman
\series default
\shape italic
whatever was believed to be long enough
\family default
\series bold
\shape default
]
\series default
 = "helloworld";
\end_layout

\begin_layout LyX-Code

\series bold
if
\series default
 (strlen(buf) + strlen(".txt") < 
\series bold
sizeof
\series default
(buf))
\begin_inset Newline newline
\end_inset

        strcat(s, ".txt");
\end_layout

\begin_layout Paragraph
/* Step
\begin_inset space ~
\end_inset

2 */
\end_layout

\begin_layout LyX-Code

\series bold
char
\series default
 buf
\series bold
[
\family roman
\series default
\shape italic
long_enough
\family default
\series bold
\shape default
]
\series default
 = "helloworld";
\end_layout

\begin_layout LyX-Code
strlcat(s, ".txt", 
\series bold
sizeof
\series default
(buf));
\end_layout

\begin_layout Paragraph
/* Step
\begin_inset space ~
\end_inset

3 */
\end_layout

\begin_layout LyX-Code
hxmc_t 
\series bold
*
\series default
buf = HXmc_strinit("helloworld");
\begin_inset Newline newline
\end_inset

HXmc_strcat(&s, ".txt");
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Improvement of string safety over time
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This makes it quite similar to the string operations (and append seems to
 be the most commonly used one to me) supported in scripting languages that
 also do without a size argument.
 The essential part of such memory containers is that their internal (hidden)
 metadata structure contains the length of the memory block in the container.
 For binary data this may be the norm, but for C-style strings, the stored
 and auto-updated length field serves as an accelerator cache.
 For more details, see 
\family typewriter
HXmc_length
\family default
.
\end_layout

\begin_layout Standard
Of course, the automatic management of memory comes with a bit of overhead
 as the string expands beyond its preallocated region.
 Such may be mitigated by doing explicit (re)sizing.
\end_layout

\begin_layout Subsection
Structural overview
\end_layout

\begin_layout Standard
HXmc functions do not actually return a pointer to the memory container
 (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
struct
\family default
) itself, but a pointer to the data block.
 Conversely, input parameters to HXmc functions will be the data block pointer.
 It is of type 
\family typewriter
hxmc_t
\begin_inset space ~
\end_inset

*
\family default
, which is typedef'ed to 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 and inherits all properties and privileges of 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
.
 Pointer arithmetic is thus supported.
 It also means you can just pass it to functions that take a 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 without having to do a member access like 
\family typewriter
s.c_str
\family default
.
 The drawback is that many functions operating on the memory container need
 a 
\family typewriter
hxmc_t
\begin_inset space ~
\end_inset

**
\family default
 (a level-two indirection), because not only does the memory block move,
 but also the memory container itself.
 This is due to the implementation of the container metadata which immediately
 and always precedes the writable memory block.
\end_layout

\begin_layout Standard
HXmc ensures that the data block is terminated by a NUL (
\family typewriter
'
\backslash
0'
\family default
) byte (unless you trash it), so you do not have to, and of course, to be
 on the safe side.
 But, the automatic NUL byte is not part of the region allocated by the
 user.
 That is, when one uses the classic approach with 
\family typewriter
malloc(4096)
\family default
, the user will have control of 4096 bytes and has to stuff the NUL byte
 in there somehow on his own; for strings this means the maximum string
 length is 4095.
 Requesting space for a 4096-byte sized HXmc container gives you the possibility
 to use all 4096 bytes for the string, because HXmc provides a NUL byte.
\end_layout

\begin_layout Standard
By the way, 
\family typewriter
hxmc_t
\family default
 is the 
\shape italic
only
\shape default
 typedef in this entire library, to distinguish it from regular 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 that does not have a backing memory cointainer.
\end_layout

\begin_layout Subsection
Constructors, destructors
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/string.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/string.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_strinit(
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXmc_strinit
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_meminit(
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 size);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXmc_meminit
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXmc_strinit
\family default
 Creates a new hxmc_t object from the supplied string and returns it.
\end_layout

\begin_layout Description

\family typewriter
HXmc_meminit
\family default
 Creates a new hxmc_t object from the supplied memory buffer of the given
 size and returns it.
 
\family typewriter
HXmc_meminit(NULL, len)
\family default
 may be used to obtain an empty container with a preallocated region of
 
\family typewriter
len
\family default
 bytes (zero is accepted for 
\family typewriter
len
\family default
).
\end_layout

\begin_layout Subsection
Data manipulation
\end_layout

\begin_layout Subsubsection
Binary-based
\end_layout

\begin_layout LyX-Code
hxmc_t 
\series bold
*
\series default
HXmc_trunc(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_trunc
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_setlen(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_setlen
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_memcpy(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_memcpy
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_memcat(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_memcat
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_mempcat(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_mempcat
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_memins(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
size_t
\series default
 pos, 
\series bold
const void *
\series default
ptr, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_memins
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_memdel(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
size_t
\series default
 pos, 
\series bold
size_t
\series default
 len);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_memdel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When 
\family typewriter
ptr
\family default
 is 
\family typewriter
NULL
\family default
, each call behaves as if 
\family typewriter
len
\family default
 would be zero.
 Specifically, no undefined behavior will result of the use of 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXmc_trunc
\family default
 Truncates the container's data to 
\family typewriter
len
\family default
 size.
 If 
\family typewriter
len
\family default
 is greater than the current data size of the container, the length is in
 fact 
\shape italic
not
\shape default
 updated, but a reallocation may be triggered, which can be used to do explicit
 allocation.
\end_layout

\begin_layout Description

\family typewriter
HXmc_setlen
\family default
 Set the data length, doing a reallocation of the memory container if needed.
 The newly available bytes are uninitialized.
 Make use of this function when letting 3rd party functions write to the
 buffer, but it should not be used with 
\family typewriter
HXmc_str*
\family default
(), 
\end_layout

\begin_layout Description

\family typewriter
HXmc_memcpy
\family default
 Truncates the container's data and copies 
\family typewriter
len
\family default
 bytes from the memory area pointed to by 
\family typewriter
ptr
\family default
 to the container.
\end_layout

\begin_layout Description

\family typewriter
HXmc_memcat
\family default
 Concatenates (appends) 
\family typewriter
len
\family default
 bytes from the memory area pointed to by 
\family typewriter
ptr
\family default
 to the container's data.
\end_layout

\begin_layout Description

\family typewriter
HXmc_mempcat
\family default
 Prepends 
\family typewriter
len
\family default
 bytes from the memory area pointed to by 
\family typewriter
ptr
\family default
 to the container's data.
\end_layout

\begin_layout Description

\family typewriter
HXmc_memins
\family default
 Prepends 
\family typewriter
len
\family default
 bytes from the memory area pointed to by 
\family typewriter
ptr
\family default
 to the 
\family typewriter
pos
\family default
'th byte of the container's data.
\end_layout

\begin_layout Description

\family typewriter
HXmc_memdel
\family default
 Deletes 
\family typewriter
len
\family default
 bytes from the container beginning at position 
\family typewriter
pos
\family default
.
\end_layout

\begin_layout Standard
In case of a memory allocation failure, the 
\family typewriter
HXmc_*
\family default
 functions will return 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Subsubsection
String-based
\end_layout

\begin_layout Standard
The string-based functions correspond to their binary-based equivalents
 with a 
\family typewriter
len
\family default
 argument of 
\family typewriter
strlen(s)
\family default
.
\end_layout

\begin_layout LyX-Code
hxmc_t 
\series bold
*
\series default
HXmc_strcpy(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_strcpy
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_strcat(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_strcat
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_strpcat(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXmc_strpcat
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
HXmc_strins(hxmc_t 
\series bold
**
\series default
mc, 
\series bold
size_t
\series default
 pos, 
\series bold
const char *
\series default
s);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXmc_strins
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
From auxiliary sources
\end_layout

\begin_layout LyX-Code
hxmc_t 
\series bold
*
\series default
HX_getl(hxmc_t 
\series bold
**
\series default
mc, FILE 
\series bold
*
\series default
fp);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_getl
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_getl
\family default
 Read the next line from 
\family typewriter
fp
\family default
 and store the result in the container.
 Returns 
\family typewriter
NULL
\family default
 on error, or when end of file occurs while no characters have been read.
\end_layout

\begin_layout Subsection
Container properties
\end_layout

\begin_layout LyX-Code

\series bold
size_t
\series default
 HXmc_length(
\series bold
const
\series default
 hxmc_t 
\series bold
**
\series default
mc);
\end_layout

\begin_layout Description

\family typewriter
HXmc_length
\family default
 Returns the length of the memory container.
 This is not always equal to the actual string length.
 For example, if 
\family typewriter
HX_chomp
\family default
 was used on an MC-backed string, 
\family typewriter
strlen
\family default
 will return less than 
\family typewriter
HXmc_length
\family default
 if newline control characters (
\family typewriter
'
\backslash
r'
\family default
 and 
\family typewriter
'
\backslash
n'
\family default
) were removed.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Format templates
\begin_inset CommandInset label
LatexCommand label
name "sec:format"

\end_inset


\end_layout

\begin_layout Standard
HXfmt is a small template system for by-name variable expansion.
 It can be used to substitute placeholders in format strings supplied by
 the user by appropriate expanded values defined by the program.
 Such can be used to allow for flexible configuration files that define
 key-value mappings such as
\end_layout

\begin_layout LyX-Code
detect_peer = ping6 -c1 %(ADDR)
\begin_inset Newline newline
\end_inset

#detect_peer = nmap -sP %(ADDR) | grep -Eq "appears to be up"
\end_layout

\begin_layout Standard
Consider for example a monitoring daemon that allows the administrator to
 specify a program of his choice with which to detect whether a peer is
 alive or not.
 The user can choose any program that is desired, but evidently needs to
 pass the address to be tested to the program.
 This is where the daemon will do a substitution of the string 
\begin_inset Quotes eld
\end_inset


\family typewriter
ping -c1 %(ADDR)
\family default

\begin_inset Quotes erd
\end_inset

 it read from the config file, and put the actual address in it before finally
 executing the command.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout LyX-Code
printf("%s has %u files
\backslash
n", user, num);
\begin_inset Newline newline
\end_inset

printf("%2$u files belong to %1$s
\backslash
n", num, user);
\end_layout

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

%s
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

%1$s
\begin_inset Quotes erd
\end_inset

 here) specifies how large 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 is
\begin_inset space ~
\end_inset

--- 
\family typewriter
sizeof(const char *)
\family default
 in this case.
 If that is missing, there is no way to know the offset of 
\begin_inset Quotes eld
\end_inset


\family typewriter
num
\family default

\begin_inset Quotes erd
\end_inset

 relative to 
\begin_inset Quotes eld
\end_inset


\family typewriter
user
\family default

\begin_inset Quotes erd
\end_inset

, making varargs retrieval impossible.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
printf
\family default
 positional parameters
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
printf
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
printf
\end_layout

\end_inset

, at least from GNU libc, has something vaguely similar: positional parameters
\begin_inset Index
status open

\begin_layout Plain Layout
positional parameters
\end_layout

\end_inset

.
 They have inherent drawbacks, though.
 One is of course the question of portability, but there is a bigger issue.
 All parameters must be specified, otherwise there is no way to determine
 the location of all following objects following the missing one on the
 stack in a varargs-function like 
\family typewriter
printf
\family default
., which makes it unsuitable to be used with templates where omitting some
 placeholders is allowed.
\end_layout

\begin_layout Subsection
Initialization, use and deallocation
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/option.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/option.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
HXformat_init(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXformat_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXformat_free(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXformat_free
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HXformat_add(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table, 
\series bold
const char *
\series default
key,
\begin_inset Newline newline
\end_inset

                 
\series bold
const void *
\series default
ptr, 
\series bold
unsigned int
\series default
 ptr_type);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXformat_add
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXformat_init
\family default
 will allocate and set up a simple string-to-string map HXbtree that is
 used for the underlying storage, and returns it.
\end_layout

\begin_layout Standard
To release the substitution table and memory associated with it, call 
\family typewriter
HXformat_free
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
HXbtree_add
\family default
 is used to add substitution entries.
 Even though a string data-based HXbtree is used, one can specify other
 types such as numeral types.
 
\family typewriter
ptr_type
\family default
 describes the type behind 
\family typewriter
ptr
\family default
 and are constants from 
\family typewriter
option.h
\family default
 (cf.
\begin_inset space \space{}
\end_inset

section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-types"

\end_inset

)
\begin_inset space ~
\end_inset

--- not all constants can be used, though, and their meaning also differs
 from what 
\family typewriter
HX_getopt
\family default
 or 
\family typewriter
HX_shconfig
\family default
 use them for
\begin_inset space ~
\end_inset

--- the two could be seen as 
\begin_inset Quotes eld
\end_inset

read
\begin_inset Quotes erd
\end_inset

 operations, while HXformat is a write operation.
\end_layout

\begin_layout Subsubsection
Immediate types
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Immediate types
\begin_inset Quotes erd
\end_inset

 are resolved when 
\family typewriter
HXformat_add
\family default
 is called, that is, they are copied and inserted into the tree, and are
 subsequently independent from any changes to variables in the program.
 Because the HXopt-originating type name, that is, 
\family typewriter
HXTYPE_*
\family default
, is also used for deferred types, the constant 
\family typewriter
HXFORMAT_IMMED
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXFORMAT_IMMED
\end_layout

\end_inset


\family default
 needs to be specified on some types to denote an immediate value.
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_STRING
\family default

\begin_inset space ~
\end_inset

--- 
\family typewriter
ptr
\family default
 is a 
\family typewriter
const char *
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_
\family default
{
\family typewriter
U
\family default
,}{
\family typewriter
CHAR
\family default
,
\family typewriter
SHORT
\family default
,
\family typewriter
INT
\family default
,
\family typewriter
LONG
\family default
,
\family typewriter
LLONG
\family default
}
\family typewriter
 | HXFORMAT_IMMED
\family default

\begin_inset space ~
\end_inset

--- mapping to the standard types
\end_layout

\begin_layout Subsubsection
Deferred types
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Deferred types
\begin_inset Quotes erd
\end_inset

 are resolved on every invocation of a formatter function (
\family typewriter
HXformat_*printf
\family default
).
 The expansions may be changed by modifying the underlying variable pointed
 to, but the pointer must remain valid and its pointee not go out of scope.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:hxformat-immediate-deferred"

\end_inset

 shows the difference in a code sample.
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_STRP
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_STRP
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- 
\family typewriter
ptr
\family default
 is a 
\family typewriter
const char *const *
\family default
; the pointer resolution is deferred until the formatter is called with
 one of the 
\family typewriter
HXformat_*printf
\family default
 functions.
 Deferred in the sense it is always resolved anew.
 
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_BOOL
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_BOOL
\end_layout

\end_inset


\begin_inset space ~
\end_inset

--- 
\family typewriter
ptr
\family default
 is a 
\family typewriter
const int
\begin_inset space ~
\end_inset

*
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_
\family default
{
\family typewriter
U
\family default
,}{
\family typewriter
CHAR
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_CHAR
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UCHAR
\end_layout

\end_inset

,
\family typewriter
SHORT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_SHORT
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_USHORT
\end_layout

\end_inset

,
\family typewriter
INT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT
\end_layout

\end_inset

,
\family typewriter
LONG
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_LONG
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULONG
\end_layout

\end_inset

,
\family typewriter
LLONG
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_LLONG
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULLONG
\end_layout

\end_inset

}
\begin_inset space ~
\end_inset

--- mapping to the standard types with one indirection (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
int
\begin_inset space ~
\end_inset

*
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
HXTYPE_
\family default
{
\family typewriter
FLOAT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_FLOAT
\end_layout

\end_inset

,
\family typewriter
DOUBLE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_DOUBLE
\end_layout

\end_inset

}
\begin_inset space ~
\end_inset

--- mapping to the two floating-point types with one indirection (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
double
\begin_inset space ~
\end_inset

*
\family default
)
\end_layout

\begin_layout Subsection
Invoking the formatter
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 HXformat_aprintf(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table, hxmc_t 
\series bold
**
\series default
dest, 
\series bold
const char *
\series default
template);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXformat_aprintf
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HXformat_sprintf(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table, 
\series bold
char *
\series default
dest, 
\series bold
size_t
\series default
 size, 
\series bold
const char *
\series default
template);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXformat_sprintf
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HXformat_fprintf(
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table, FILE 
\series bold
*
\series default
filp, 
\series bold
const char *
\series default
template);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXformat_fprintf
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXformat_aprintf
\family default
 Substitute placeholders in 
\family typewriter
template
\family default
 using the given table.
 This will produce a string in a HX memory container (hxmc_t), and the pointer
 is put into 
\family typewriter
*dest
\family default
.
 The caller will be responsible for freeing it later when it is done using
 the result.
\end_layout

\begin_layout Description

\family typewriter
HXformat_sprintf
\family default
 Do substitution and store the expanded result in the buffer 
\family typewriter
dest
\family default
 which is of size 
\family typewriter
size
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXformat_fprintf
\family default
 Do substituion and directly output the expansion to the given stdio stream.
\end_layout

\begin_layout Standard
On success, the length of the expanded string is returned, excluding the
 trailing 
\family typewriter
'
\backslash
0'
\family default
.
 While 
\family typewriter
HXformat_sprintf
\family default
 will not write more than 
\family typewriter
size
\family default
 bytes (including the 
\family typewriter
'
\backslash
0'
\family default
), the length it would have taken is returned, similar to what 
\family typewriter
sprintf
\family default
 does.
 On error, negative errno is returned.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout LyX-Code

\series bold
const char *
\series default
b = "Hello World";
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
char
\series default
 c
\family default
\series bold
[]
\family typewriter
\series default
 = "Hello World";
\family default

\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
struct
\series default
 HXbtree 
\series bold
*
\series default
table = HXformat_init();
\begin_inset Newline newline
\end_inset

HXformat_add(table, "%(GREETING1)", b, HXTYPE_STRING);
\begin_inset Newline newline
\end_inset

HXformat_add(table, "%(GREETING2)", &c, HXTYPE_STRP);
\begin_inset Newline newline
\end_inset

b = NULL;
\begin_inset Newline newline
\end_inset

snprintf(c, 
\family default
\series bold
sizeof
\family typewriter
\series default
(c), "Hello Home");
\begin_inset Newline newline
\end_inset

HXformat_aprintf(...);
\end_layout

\begin_layout Plain Layout
Upon calling 
\family typewriter
HXformat_*printf
\family default
, 
\family typewriter
%(GREETING1)
\family default
 will expand to 
\begin_inset Quotes eld
\end_inset

Hello World
\begin_inset Quotes erd
\end_inset

 whereas 
\family typewriter
%(GREETING2)
\family default
 will expand to 
\begin_inset Quotes eld
\end_inset

Hello Home
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:hxformat-immediate-deferred"

\end_inset

Immediate and deferred resolution
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Filesystem operations
\end_layout

\begin_layout Section
Directory traversal
\begin_inset CommandInset label
LatexCommand label
name "sec:dir-ops1"

\end_inset


\end_layout

\begin_layout Standard
libHX provides a minimal readdir-style wrapper for cross-platform directory
 traversal.
 This is needed because platforms such as do not have readdir (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

Win32), or to work around peculiarities in the lower implementation.
 Solaris's 
\family typewriter
struct dirent
\family default
 for example is 
\begin_inset Quotes eld
\end_inset

too small
\begin_inset Quotes erd
\end_inset

, that is, 
\family typewriter
readdir
\family default
 will cause a buffer overrun when Linux code is directly ported to it without
 anticipating for this scenario.
 libHX's 
\family typewriter
dir.c
\family default
 mitigates this.
\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/misc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
HXdir_open(
\series bold
const char *
\series default
directory);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXdir_open
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
const char *
\series default
HXdir_read(
\series bold
void *
\series default
handle);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXdir_read
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 HXdir_close(
\series bold
void *
\series default
handle);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXdir_close
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXdir_open
\family default
 returns a pointer to its private data area, or 
\family typewriter
NULL
\family default
 upon failure, in which case 
\family typewriter
errno
\family default
 is preserved from the underlying system calls.
 
\family typewriter
HXdir_read
\family default
 causes the next entry from the directory to be fetched.
 The pointer returned by 
\family typewriter
HXdir_read
\family default
 must not be freed, and the data is overwritten in subsequent calls to the
 same handle.
 If you want to keep it around, you will have to duplicate it yourself.
 
\family typewriter
HXdir_close
\family default
 will close the directory and free the private data it held.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <errno.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
dh;
\begin_inset Newline newline
\end_inset


\series bold
if
\series default
 ((dh = HXdir_open(".")) == NULL) {
\begin_inset Newline newline
\end_inset

        fprintf(stderr, "Could not open directory: %s
\backslash
n", strerror(errno));
\begin_inset Newline newline
\end_inset

        return;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 ((dentry = HXdir_read(dh)) != NULL)
\begin_inset Newline newline
\end_inset

        printf("%s
\backslash
n", dentry);
\begin_inset Newline newline
\end_inset

HXdir_close(dh);
\end_layout

\begin_layout Standard
This sample will open the current directory, and print out all entries as
 it iterates over them.
\end_layout

\begin_layout Section
Directory operations
\begin_inset CommandInset label
LatexCommand label
name "sec:dir-ops2"

\end_inset


\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/misc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_mkdir(
\series bold
const char *
\series default
path);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_mkdir
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_rrmdir(
\series bold
const char *
\series default
path);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_rrmdir
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HX_mkdir
\family default
 will create the directory given by 
\family typewriter
path
\family default
, and all its parents that do not exist yet.
 It is equivalent to the `
\family typewriter
mkdir -p
\family default
` shell command.
 It will return >0 for success, or 
\family typewriter
-errno
\family default
 on error.
\end_layout

\begin_layout Standard

\family typewriter
HX_rrmdir
\family default
 also maps to an operation commonly done on the shell, `
\family typewriter
rm -Rf
\family default
`, deleting the directory given by 
\family typewriter
path
\family default
, including all files within it and its subdirectories.
 Errors during deletion are ignored, but if there was any, the errno value
 of the first one is returned negated.
\end_layout

\begin_layout Section
File operations
\begin_inset CommandInset label
LatexCommand label
name "sec:file-ops"

\end_inset


\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/misc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_copy_file(
\series bold
const char *
\series default
src, 
\series bold
const char *
\series default
dest, 
\series bold
unsigned int
\series default
 flags, ...);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_copy_file
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_copy_dir(
\series bold
const char *
\series default
src, 
\series bold
const char *
\series default
dest, 
\series bold
unsigned int
\series default
 flags, ...);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_copy_dir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Possible flags that can be used with the functions:
\end_layout

\begin_layout Description

\family typewriter
HXF_KEEP
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXF_KEEP
\end_layout

\end_inset

 Do not overwrite existing files.
\end_layout

\begin_layout Description

\family typewriter
HXF_UID
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXF_UID
\end_layout

\end_inset

 Change the new file's owner to the UID given in the varargs section (
\family typewriter
...
\family default
).
 
\family typewriter
HXF_UID
\family default
 is processed before 
\family typewriter
HXF_GID
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXF_GID
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXF_GID
\end_layout

\end_inset

 Change the new file's group owner to the GID given in the varargs section.
 This is processed after 
\family typewriter
HXF_UID
\family default
.
\end_layout

\begin_layout Standard
Error checking is flakey.
\end_layout

\begin_layout Standard

\family typewriter
HX_copy_file
\family default
 will return >0 on success, or 
\family typewriter
-errno
\family default
 on failure.
 Errors can arise from the use of the syscalls 
\family typewriter
open
\family default
, 
\family typewriter
read
\family default
 and 
\family typewriter
write
\family default
.
 The return value of 
\family typewriter
fchmod
\family default
, which is used to set the UID and GID, is actually ignored, which means
 verifying that the owner has been set cannot be detected with 
\family typewriter
HX_copy_file
\family default
 alone (historic negligience?).
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Options and Configuration Files
\end_layout

\begin_layout Section
Option parsing
\begin_inset CommandInset label
LatexCommand label
name "sec:option"

\end_inset


\end_layout

\begin_layout Standard
libHX uses a table-based approach like libpopt
\begin_inset Foot
status open

\begin_layout Plain Layout
The alternative would be an iterative, open-coded approach like 
\family typewriter
getopt
\family default
(3) requires.
\end_layout

\end_inset

.
 It provides for both long and short options and the different styles associated
 with them, such as absence or presence of an equals sign for long options
 (
\family typewriter
--foo=bar
\family default
 and 
\family typewriter
--foo bar
\family default
), bundling (writing 
\family typewriter
-abc
\family default
 for non-argument taking options 
\family typewriter
-a -b -c
\family default
), squashing (writing 
\family typewriter
-fbar
\family default
 for an argument-requiring option 
\family typewriter
-f
\begin_inset space ~
\end_inset

bar
\family default
).
 The 
\begin_inset Quotes eld
\end_inset

lone dash
\begin_inset Quotes erd
\end_inset

 that is often used to indicate standard input or standard output, is correctly
 handled
\begin_inset Foot
status open

\begin_layout Plain Layout
popt failed to do this for a long time.
\end_layout

\end_inset

, as in 
\family typewriter
-f
\begin_inset space ~
\end_inset

-
\family default
.
\end_layout

\begin_layout Standard
A table-based approach allows for the parser to run as one atomic block
 of code (callbacks are, by definition, 
\begin_inset Quotes eld
\end_inset

special
\begin_inset Quotes erd
\end_inset

 exceptions), making it more opaque than an open-coded 
\family typewriter
getopt
\family default
(3) loop.
 You give it your argument vector and the table, snip the finger (call the
 parser function once), and it is done.
 In getopt on the other hand, the 
\family typewriter
getopt
\family default
 function returns for every argument it parsed and needs to be called repeatedly.
\end_layout

\begin_layout Subsection
Synopsis
\begin_inset CommandInset label
LatexCommand label
name "sub:option-synopsis"

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/option.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/option.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXoption {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct HXoption
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
const char
\series default
 *ln;
\begin_inset Newline newline
\end_inset

        
\series bold
char
\series default
 sh;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 type;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 ival;
\begin_inset Newline newline
\end_inset

        
\series bold
const char *
\series default
sval;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
ptr, 
\series bold
*
\series default
uptr;
\begin_inset Newline newline
\end_inset

        
\series bold
void (*
\series default
cb
\series bold
)
\series default
(
\series bold
const struct
\series default
 HXoptcb 
\series bold
*
\series default
);
\begin_inset Newline newline
\end_inset

        
\series bold
const char *
\series default
help, 
\series bold
*
\series default
htyp;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_getopt(
\series bold
const struct
\series default
 HXoption 
\series bold
*
\series default
options_table, 
\series bold
int *
\series default
argc,
\begin_inset Newline newline
\end_inset

              
\series bold
const char ***
\series default
argv, 
\series bold
unsigned int
\series default
 flags);
\end_layout

\begin_layout Standard
The various fields of 
\family typewriter
struct HXoption
\family default
 are:
\end_layout

\begin_layout Description

\family typewriter
ln
\family default
 The long option name, if any.
 May be 
\family typewriter
NULL
\family default
 if none is to be assigned for this entry.
\end_layout

\begin_layout Description

\family typewriter
sh
\family default
 The short option name/character, if any.
 May be 
\family typewriter
'
\backslash
0'
\family default
 if none is to be assigned for this entry.
\end_layout

\begin_layout Description

\family typewriter
type
\family default
 The type of the entry, essentially denoting the type of the target variable.
\end_layout

\begin_layout Description

\family typewriter
ival
\family default
 An integer value to be stored into 
\family typewriter
*(int
\begin_inset space ~
\end_inset

*)ptr
\family default
 when 
\family typewriter
HXTYPE_IVAL
\family default
 is used.
\end_layout

\begin_layout Description

\family typewriter
sval
\family default
 A string whose address will be stored into 
\family typewriter
*(const char
\begin_inset space ~
\end_inset

**)ptr
\family default
 when 
\family typewriter
HXTYPE_SVAL
\family default
 is used.
\end_layout

\begin_layout Description

\family typewriter
ptr
\family default
 A pointer to the variable so that the option parser can store the requested
 data in it.
 The pointer may be 
\family typewriter
NULL
\family default
 in which case no data is stored (but 
\family typewriter
cb
\family default
 is still called if defined, with the data).
\end_layout

\begin_layout Description

\family typewriter
uptr
\family default
 A user-supplied pointer.
 Its value is passed verbatim to the callback, and may be used for any purpose
 the user wishes.
\end_layout

\begin_layout Description

\family typewriter
cb
\family default
 If not 
\family typewriter
NULL
\family default
, call out to the referenced function after the option has been parsed (and
 the results possibly be stored in 
\family typewriter
ptr
\family default
)
\end_layout

\begin_layout Description

\family typewriter
help
\family default
 A help string that is shown for the option when the option table is dumped
 by request (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
yourprgram --help
\family default
)
\end_layout

\begin_layout Description

\family typewriter
htyp
\family default
 String containing a keyword to aid the user in understanding the available
 options during dump.
 See examples.
\end_layout

\begin_layout Standard
Due to the amount of fields, it is advised to use C99 named initializers
 to populate a struct, as they allow to omit unspecified fields, and assume
 no specific order of the members:
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXoption e = {.sh = 'f', .help = "Force"};
\end_layout

\begin_layout Standard
It is a sad fact that C++ has not gotten around to implement these yet.
 It is advised to put the option parsing code into a separate 
\family typewriter
.c
\family default
 file that can then be compiled in C99 rather than C++ mode.
\end_layout

\begin_layout Subsection
Type map
\begin_inset CommandInset label
LatexCommand label
name "sub:option-types"

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXTYPE_NONE
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXTYPE_NONE
\end_layout

\end_inset


\family default
\series default
 The option does not take any argument, but the presence of the option may
 be record by setting the 
\family typewriter
*(int
\begin_inset space ~
\end_inset

*)ptr
\family default
 to 1.
 Other rules apply when 
\family typewriter
HXOPT_\SpecialChar \-
INC
\family default
 or 
\family typewriter
HXOPT_\SpecialChar \-
DEC
\family default
 are specified as flags (see section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-flags"

\end_inset

).
\end_layout

\begin_layout Description

\family typewriter
HXTYPE_VAL
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXTYPE_VAL
\end_layout

\end_inset


\family default
\series default
 Use the integer value specified by 
\family typewriter
ival
\family default
 and store it in 
\family typewriter
*(int
\begin_inset space ~
\end_inset

*)ptr
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXTYPE_SVAL
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXTYPE_SVAL
\end_layout

\end_inset


\family default
\series default
 Use the memory location specified by 
\family typewriter
sval
\family default
 and store it in 
\family typewriter
*(const char
\begin_inset space ~
\end_inset

**)ptr
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXTYPE_BOOL
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXTYPE_BOOL
\end_layout

\end_inset


\family default
\series default
 Interpret the supplied argument as a boolean descriptive (must be 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

) and store the result in 
\family typewriter
*(int
\begin_inset space ~
\end_inset

*)ptr
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXTYPE_STRING
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_STRING
\end_layout

\end_inset


\family default
 The argument string is duplicated to a new memory region and the resulting
 pointer stored into 
\family typewriter
*(char
\begin_inset space ~
\end_inset

**)ptr
\family default
.
 This incurs an allocation so that subsequently modifying the original argument
 string in any way will not falsely propagate.
\end_layout

\begin_layout Description

\family typewriter
HXTYPE_STRDQ
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXTYPE_STRDQ
\end_layout

\end_inset


\family default
\series default
 The argument string is duplicated to a new memory region and the resulting
 pointer is added to the given HXdeque.
 Note that you often need to use deferred initialization of the options
 table to avoid putting 
\family typewriter
NULL
\family default
 into the entry.
 See section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-pitfalls-static"

\end_inset

.
\end_layout

\begin_layout Standard
The following table lists the types that map to the common integral.
 Signed and unsigned integeral types are processed using 
\family typewriter
strtol
\family default
 and 
\family typewriter
strtoul
\family default
, respectively.
 
\family typewriter
strtol
\family default
 and 
\family typewriter
strtoul
\family default
 will be called with automatic base detection.
 This usually means that a leading 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 indicates the string is given in octal (8) base, a leading 
\begin_inset Quotes eld
\end_inset

0x
\begin_inset Quotes erd
\end_inset

 indicates hexadecimal (16) base, and decimal (10) otherwise.
 
\family typewriter
HXTYPE_\SpecialChar \-
LLONG
\family default
,
\family typewriter
 HXTYPE_\SpecialChar \-
ULLONG
\family default
,
\family typewriter
 HXTYPE_\SpecialChar \-
INT64
\family default
 and
\family typewriter
 HXTYPE_\SpecialChar \-
UINT64
\family default
 use
\family typewriter
 strtoll
\family default
 and/or
\family typewriter
 strtoull
\family default
, which may not be available on all platforms.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="bottom" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type of pointee
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type of pointee
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_CHAR
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_CHAR
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT8
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT8
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int8_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UCHAR
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UCHAR
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
unsigned char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT8
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT8
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
uint8_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_SHORT
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_SHORT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
short
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT16
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT16
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int16_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_USHORT
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_USHORT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
unsigned short
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT16
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT16
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
uint16_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT32
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT32
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int32_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
unsigned int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT32
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT32
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
uint32_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_LONG
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_LONG
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT64
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT64
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int64_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULONG
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULONG
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
unsigned long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT64
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_UINT64
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
uint64_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_LLONG
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_LLONG
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
long long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_FLOAT
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_FLOAT
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULLONG
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_ULLONG
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
unsigned long long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HXTYPE_DOUBLE
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_DOUBLE
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
double
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Integral and floating-point types for the libHX option parser
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HXTYPE_\SpecialChar \-
FLOAT
\family default
 and 
\family typewriter
HXTYPE_\SpecialChar \-
DOUBLE
\family default
 make use of 
\family typewriter
strtod
\family default
 (
\family typewriter
strtof
\family default
 is not used).
 A corresponding 
\family typewriter
type
\family default
 for the 
\begin_inset Quotes eld
\end_inset

long double
\begin_inset Quotes erd
\end_inset

 format is not specified, but may be implemented on behalf of the user via
 a callback (see section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-example-cb"

\end_inset

).
\end_layout

\begin_layout Subsection
Flags
\begin_inset CommandInset label
LatexCommand label
name "sub:option-flags"

\end_inset


\end_layout

\begin_layout Standard
Flags can be combined into the 
\family typewriter
type
\family default
 parameter by OR'ing them.
 It is valid to not specify any flags at all, but most flags collide with
 one another.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_INC
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_INC
\end_layout

\end_inset


\family default
\series default
 Perform an increment on the memory location specified by the 
\family typewriter
*(int
\begin_inset space ~
\end_inset

*)ptr
\family default
 pointer.
 Make sure the referenced variable is initialized before!
\end_layout

\begin_layout Description

\family typewriter
HXOPT_DEC
\family default
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXOPT_DEC
\end_layout

\end_inset


\series default
 Perform a decrement on the pointee.
\end_layout

\begin_layout Standard
Only one of 
\family typewriter
HXOPT_\SpecialChar \-
INC
\family default
 and 
\family typewriter
HXOPT_\SpecialChar \-
DEC
\family default
 may be specified at a time, and they require that the base type is 
\family typewriter
HXTYPE_\SpecialChar \-
NONE
\family default
, or they will have no effect.
 An example may be found in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-example-incdec"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_NOT
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_NOT
\end_layout

\end_inset


\family default
\series default
 Binary negation of the argument directly after reading it from the command
 line into memory.
 Any of the three following operations are executed with the already-negated
 value.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_OR
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXOPT_OR
\end_layout

\end_inset


\family default
\series default
 Binary 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

s the pointee with the specified\SpecialChar \slash{}
transformed value.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_AND
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_AND
\end_layout

\end_inset


\family default
\series default
 Binary 
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

s the pointee with the specified\SpecialChar \slash{}
transformed value.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_XOR
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_XOR
\end_layout

\end_inset


\family default
\series default
 Binary 
\begin_inset Quotes eld
\end_inset

XOR
\begin_inset Quotes erd
\end_inset

s the pointee with the specified\SpecialChar \slash{}
transformed value.
\end_layout

\begin_layout Standard
Only one of (
\family typewriter
HXOPT_OR
\family default
, 
\family typewriter
HXOPT_\SpecialChar \-
AND
\family default
, 
\family typewriter
HXOPT_\SpecialChar \-
XOR
\family default
) may be specified at a time, but they can be used with any integral 
\family typewriter
type
\family default
 (
\family typewriter
HXTYPE_\SpecialChar \-
UINT
\family default
, 
\family typewriter
HXTYPE_\SpecialChar \-
ULONG
\family default
, etc.).
 An example can be found in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-example-mask"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_OPTIONAL
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_OPTIONAL
\end_layout

\end_inset


\family default
\series default
 This flag allows for an option to take zero or one argument.
 Needless to say that this can be confusing to the user.
 
\shape italic
iptables
\shape default
's 
\begin_inset Quotes eld
\end_inset


\family typewriter
-L
\family default

\begin_inset Quotes erd
\end_inset

 option for example is one of this kind (though it does not use the libHX
 option parser).
 When this flag is used, 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f -b
\family default

\begin_inset Quotes erd
\end_inset

 is interpreted as 
\family typewriter
-f
\family default
 without an argument, as is 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f --bar
\family default

\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f -
\family default

\begin_inset Quotes erd
\end_inset

 of course is not, because 
\begin_inset Quotes eld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes erd
\end_inset

 is not an option, but serves to indicate standard input/output.
\end_layout

\begin_layout Subsection
Special entries
\end_layout

\begin_layout Standard
HXopt provides two special entries via macros:
\end_layout

\begin_layout Description

\family typewriter
HXOPT_AUTOHELP
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_AUTOHELP
\end_layout

\end_inset


\family default
\series default
 Adds entries to recognize 
\begin_inset Quotes eld
\end_inset


\family typewriter
-?
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
--help
\family default

\begin_inset Quotes erd
\end_inset

 that will display the (long-format) help screen, and 
\begin_inset Quotes eld
\end_inset


\family typewriter
--usage
\family default

\begin_inset Quotes erd
\end_inset

 that will display the short option syntax overview.
 All three options will exit the program afterwards.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_TABLEEND
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_TABLEEND
\end_layout

\end_inset


\family default
\series default
 This sentinel marks the end of the table and is required on all tables.
 (See examples for details.)
\end_layout

\begin_layout Subsection
Invoking the parser
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 HX_getopt(
\series bold
const struct
\series default
 HXoption 
\series bold
*
\series default
options_table, 
\series bold
int *
\series default
argc,
\begin_inset Newline newline
\end_inset

              
\series bold
const char ***
\series default
argv, 
\series bold
unsigned int
\series default
 flags);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_getopt
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HX_getopt
\family default
 is the actual parsing function.
 It takes the option table, and a pointer to your 
\family typewriter
argc
\family default
 and 
\family typewriter
argv
\family default
 variables that you get from the 
\family typewriter
main
\family default
 function.
 The parser will, unlike GNU getopt, literally 
\begin_inset Quotes eld
\end_inset

eats
\begin_inset Quotes erd
\end_inset

 all options and their arguments, leaving only non-options in 
\family typewriter
argv
\family default
, and 
\family typewriter
argc
\family default
 updated, when finished.
 This is similar to how Perl's 
\begin_inset Quotes eld
\end_inset

Getopt::Long
\begin_inset Quotes erd
\end_inset

 module works.
 Additional flags can control the exact behavior of 
\family typewriter
HX_getopt
\family default
:
\end_layout

\begin_layout Description

\family typewriter
HXOPT_PTHRU
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_PTHRU
\end_layout

\end_inset


\family default
\series default
 
\begin_inset Quotes eld
\end_inset

Passthrough mode
\begin_inset Quotes erd
\end_inset

.
 Any unknown options are not 
\begin_inset Quotes eld
\end_inset

eaten
\begin_inset Quotes erd
\end_inset

 and are instead passed back into the resulting 
\family typewriter
argv
\family default
 array.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_QUIET
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_QUIET
\end_layout

\end_inset


\family default
\series default
 Do not print any diagnostics when encountering errors in the user's input.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_HELPONERR
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXOPT_HELPONERR
\end_layout

\end_inset


\family default
\series default
 Display the (long-format) help when an error, such as an unknown option
 or a violation of syntax, is encountered.
\end_layout

\begin_layout Description

\family typewriter
HXOPT_USAGEONERR
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXOPT_USAGEONERR
\end_layout

\end_inset


\family default
\series default
 Display the short-format usage syntax when an error is encountered.
\end_layout

\begin_layout Standard
The return value can be one of the following:
\end_layout

\begin_layout Description

\family typewriter
-HXOPT_ERR_UNKN
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_ERR_UNKN
\end_layout

\end_inset


\family default
\series default
 An unknown option was encountered.
\end_layout

\begin_layout Description

\family typewriter
-HXOPT_ERR_VOID
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_ERR_VOID
\end_layout

\end_inset


\family default
\series default
 An argument was given for an option which does not allow one.
 In practice this only happens with 
\begin_inset Quotes eld
\end_inset


\family typewriter
--foo=bar
\family default

\begin_inset Quotes erd
\end_inset

 when 
\family typewriter
--foo
\family default
 is of type 
\family typewriter
HXTYPE_\SpecialChar \-
NONE
\family default
, 
\family typewriter
HXTYPE_\SpecialChar \-
VAL
\family default
 or 
\family typewriter
HXTYPE_\SpecialChar \-
SVAL
\family default
.
 This does not affect 
\begin_inset Quotes eld
\end_inset


\family typewriter
--foo bar
\family default

\begin_inset Quotes erd
\end_inset

, because this can be unambiguously interpreted as 
\begin_inset Quotes eld
\end_inset


\family typewriter
bar
\family default

\begin_inset Quotes erd
\end_inset

 being a remaining argument to the program.
\end_layout

\begin_layout Description

\family typewriter
-HXOPT_ERR_MIS
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXOPT_ERR_MIS
\end_layout

\end_inset


\family default
\series default
 Missing argument for an option that requires one.
\end_layout

\begin_layout Description
positive
\begin_inset space ~
\end_inset

non-zero Success.
\end_layout

\begin_layout Subsection
Pitfalls
\end_layout

\begin_layout Subsubsection
Staticness of tables
\begin_inset CommandInset label
LatexCommand label
name "sub:option-pitfalls-static"

\end_inset


\end_layout

\begin_layout Standard
The following is an example of a trap regarding 
\family typewriter
HXTYPE_\SpecialChar \-
STRDQ
\family default
:
\end_layout

\begin_layout LyX-Code

\series bold
static struct
\series default
 HXdeque 
\series bold
*
\series default
dq;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static bool
\series default
 get_options(
\series bold
int *
\series default
argc, 
\series bold
const char ***
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
static const struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

                {.sh = 'N', .type = HXTYPE_STRDQ, .q_strdq = dq,
\begin_inset Newline newline
\end_inset

                 .help = "Add name"},
\begin_inset Newline newline
\end_inset

                HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 HX_getopt(options_table, argc, argv, HXOPT_USAGEONERR) > 0;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 main(
\series bold
int
\series default
 argc, 
\series bold
const char **
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        dq = HXdeque_init();
\begin_inset Newline newline
\end_inset

        get_options(&argc, &argv);
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 0;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Standard
The problem here is that 
\family typewriter
options_\SpecialChar \-
table
\family default
 is, due to the 
\family typewriter
static
\family default
 keyword, initialized at compile-time where 
\family typewriter
dq
\family default
 is still 
\family typewriter
NULL
\family default
.
 To counter this problem and have it doing the right thing, you must remove
 the 
\family typewriter
static
\family default
 qualifier on the options table when used with 
\family typewriter
HXTYPE_\SpecialChar \-
STRDQ
\family default
, so that it will be evaluated when it is first executed.
\end_layout

\begin_layout Standard
It was not deemed worthwhile to have 
\family typewriter
HXTYPE_\SpecialChar \-
STRDQ
\family default
 take an indirect HXdeque (
\family typewriter
struct HXdeque
\begin_inset space ~
\end_inset

**
\family default
) instead just to bypass this issue.
 (Live with it.)
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
The HX option parser has been influenced by both popt and Getopt::Long,
 but eventually, there are differences:
\end_layout

\begin_layout Itemize
Long options with a single dash (
\begin_inset Quotes eld
\end_inset


\family typewriter
-foo bar
\family default

\begin_inset Quotes erd
\end_inset

).
 This unsupported syntax clashes very easily with support for option bundling
 or squashing.
 In case of bundling, 
\begin_inset Quotes eld
\end_inset


\family typewriter
-foo
\family default

\begin_inset Quotes erd
\end_inset

 might actually be 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f -o -o
\family default

\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f oo
\family default

\begin_inset Quotes erd
\end_inset

 in case of squashing.
 It also introduces redundant ways to specify options, which is not in the
 spirit of the author.
\end_layout

\begin_layout Itemize
Options using a 
\begin_inset Quotes eld
\end_inset


\family typewriter
+
\family default

\begin_inset Quotes erd
\end_inset

 as a prefix, as in 
\begin_inset Quotes eld
\end_inset


\family typewriter
+foo
\family default

\begin_inset Quotes erd
\end_inset

.
 Xterm for example uses it as a way to negate an option.
 In the author's opinion, using one character to specify options is enough
\begin_inset space ~
\end_inset

--- by GNU standards, a negator is named 
\begin_inset Quotes eld
\end_inset


\family typewriter
--no-foo
\family default

\begin_inset Quotes erd
\end_inset

.
 Even Microsoft stuck to a single option introducing character (that would
 be 
\begin_inset Quotes eld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
Table nesting like implemented in popt.
 HXopt has no provision for nested tables, as the need has not come up yet.
 It does however support chained processing (see section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-example-chained"

\end_inset

).
 You cannot do nested tables even with callbacks, as the new 
\family typewriter
argv
\family default
 array is only put in place shortly before 
\family typewriter
HX_getopt
\family default
 returns.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Basic example
\end_layout

\begin_layout Standard
The following code snippet should provide an equivalent of the GNU getopt
 sample
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.gnu.org/software/libtool/manual/libc/Example-of-Getopt.html
\backslash
#Example-of-Getopt
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <stdio.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <stdilb.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <libHX/option.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 main(
\series bold
int
\series default
 argc, 
\series bold
const char **
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 aflag = 0;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 bflag = 0;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
cflag = NULL;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

                {.sh = 'a', .type = HXTYPE_NONE, .ptr = &aflag},
\begin_inset Newline newline
\end_inset

                {.sh = 'b', .type = HXTYPE_NONE, .ptr = &bflag},
\begin_inset Newline newline
\end_inset

                {.sh = 'c', .type = HXTYPE_STRING, .ptr = &cflag},
\begin_inset Newline newline
\end_inset

                HXOPT_AUTOHELP,
\end_layout

\begin_layout LyX-Code
                HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (HX_getopt(options_table, &argc, &argv, HXOPT_USAGEONERR) <= 0)
\end_layout

\begin_layout LyX-Code
                
\series bold
return
\series default
 EXIT_FAILURE;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        printf("aflag = %d, bflag = %d, cvalue = %s
\backslash
n",
\begin_inset Newline newline
\end_inset

               aflag, bflag, cvalue);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
while
\series default
 (*++argv != NULL)
\begin_inset Newline newline
\end_inset

                printf("Non-option argument %s
\backslash
n", *argv);
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 EXIT_SUCCESS;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsubsection
Verbosity levels
\begin_inset CommandInset label
LatexCommand label
name "sub:option-example-incdec"

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 verbosity = 1; 
\series bold
/* 
\family roman
\series default
\shape italic
somewhat silent by default
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset


\series bold
static const struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {.sh = 'q', .type = HXTYPE_NONE | HXOPT_DEC, .q_int = &verbosity,
\begin_inset Newline newline
\end_inset

         .help = "Reduce verbosity"},
\begin_inset Newline newline
\end_inset

        {.sh = 'v', .type = HXTYPE_NONE | HXOPT_INC, .q_int = &verbosity,
\begin_inset Newline newline
\end_inset

         .help = "Increase verbosity"},
\begin_inset Newline newline
\end_inset

        HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
This sample option table makes it possible to turn the verbosity of the
 program up or down, depending on whether the user specified 
\family typewriter
-q
\family default
 or 
\family typewriter
-v
\family default
.
 By passing multiple 
\family typewriter
-v
\family default
 flags, the verbosity can be turned up even more.
 The range depends on the 
\begin_inset Quotes eld
\end_inset


\family typewriter
int
\family default

\begin_inset Quotes erd
\end_inset

 data type for your particular platform and compiler; if you want to have
 the verbosity capped at a specific level, you will need to use an extra
 callback:
\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 verbosity = 1;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static void
\series default
 v_check(
\series bold
const struct
\series default
 HXoptcb 
\series bold
*
\series default
cbi)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (verbosity < 0)
\begin_inset Newline newline
\end_inset

                verbosity = 0;
\begin_inset Newline newline
\end_inset

        
\series bold
else if
\series default
 (verbosity > 4)
\begin_inset Newline newline
\end_inset

                verbosity = 4;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static const struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {.sh = 'q', .type = HXTYPE_NONE | HXOPT_DEC, .q_int = &verbosity,
\begin_inset Newline newline
\end_inset

         .cb = v_check, .help = "Lower verbosity"},
\begin_inset Newline newline
\end_inset

        {.sh = 'v', .type = HXTYPE_NONE | HXOPT_INC, .q_int = &verbosity,
\begin_inset Newline newline
\end_inset

         .cb = v_check, .help = "Raise verbosity"},
\begin_inset Newline newline
\end_inset

        HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Subsubsection
Mask operations
\begin_inset CommandInset label
LatexCommand label
name "sub:option-example-mask"

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
/* 
\family roman
\series default
\shape italic
run on all CPU cores by default
\family default
\series bold
\shape default
 *
\series default
/
\begin_inset Newline newline
\end_inset


\series bold
static unsigned int
\series default
 cpu_mask = ~0U
\series bold
;
\begin_inset Newline newline
\end_inset

/* 
\family roman
\series default
\shape italic
use no network connections by default
\family default
\shape default
 
\series bold
*/
\begin_inset Newline newline
\end_inset

static unsigned int
\series default
 net_mask = 0;
\series bold

\begin_inset Newline newline
\end_inset

static struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {.sh = 'c', .type = HXTYPE_UINT | HXOPT_NOT | HXOPT_AND,
\begin_inset Newline newline
\end_inset

         .q_uint = &cpu_mask,
\begin_inset Newline newline
\end_inset

         .help = "Mask of cores to exclude", .htyp = "cpu_mask"},
\begin_inset Newline newline
\end_inset

        {.sh = 'n', .type = HXTYPE_UINT | HXOPT_OR, .q_uint = &net_mask,
\end_layout

\begin_layout LyX-Code
         .help = "Mask of network channels to additionally use",
\begin_inset Newline newline
\end_inset

         .htyp = "channel_mask"},
\begin_inset Newline newline
\end_inset

        HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
What this options table does is 
\family typewriter
cpu_mask &= ~x
\family default
 and 
\family typewriter
net_mask |= y
\family default
, the classic operations of clearing and setting bits.
\end_layout

\begin_layout Subsubsection
Support for non-standard actions
\begin_inset CommandInset label
LatexCommand label
name "sub:option-example-cb"

\end_inset


\end_layout

\begin_layout Standard
Supporting additional types or custom storage formats is easy, by simply
 using 
\family typewriter
HXTYPE_\SpecialChar \-
STRING
\family default
, 
\family typewriter
NULL
\family default
 as the data pointer (usually by not specifying it at all), the pointer
 to your data in the user-specified pointer 
\family typewriter
uptr
\family default
, and the callback function in 
\family typewriter
cb
\family default
.
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 fixed_point {
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 integral;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 fraction;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static struct
\series default
 fixed_point number;
\end_layout

\begin_layout LyX-Code
\begin_inset Newline newline
\end_inset


\series bold
static void
\series default
 fixed_point_parse
\series bold
(const struct
\series default
 HXoptcb
\series bold
 
\series default
*cbi)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
end;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        number.integral = strtol(cbi->data, &end, 0);
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (*end == '
\backslash
0')
\begin_inset Newline newline
\end_inset

                number.fraction = 0;
\begin_inset Newline newline
\end_inset

        
\series bold
else if
\series default
 (*end == '.')
\begin_inset Newline newline
\end_inset

                number.fraction = strtoul(end + 1, NULL, 0);
\begin_inset Newline newline
\end_inset

        
\series bold
else
\series default

\begin_inset Newline newline
\end_inset

                fprintf(stderr, "Illegal input.
\backslash
n");
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Newline newline
\end_inset

static const struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {.sh = 'n', .type = HXTYPE_STRING, .cb = fixed_point_parse,
\begin_inset Newline newline
\end_inset

         .uptr = &number, .help = "Do this or that",
\begin_inset Newline newline
\end_inset

        HXOPT_TABLEEND,
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout Subsubsection
Chained argument processing
\begin_inset CommandInset label
LatexCommand label
name "sub:option-example-chained"

\end_inset


\end_layout

\begin_layout Standard
On the first run, only 
\family typewriter
--cake
\family default
 and 
\family typewriter
--fruit
\family default
 is considered, which is then used to select the next set of accepted options.
 Note that 
\family typewriter
HXOPT_\SpecialChar \-
DESTROY_\SpecialChar \-
OLD
\family default
 is used here, which causes the argv that is produced by the first invocation
 of 
\family typewriter
HX_getopt
\family default
 in the 
\family typewriter
get_options
\family default
 function to be freed as it gets replaced by a new argv again by 
\family typewriter
HX_getopt
\family default
 in 
\family typewriter
get_cakes
\family default
\SpecialChar \slash{}

\family typewriter
get_fruit
\family default
.
 
\family typewriter
HXOPT_\SpecialChar \-
DESTROY_\SpecialChar \-
OLD
\family default
 is however 
\shape italic
not
\shape default
 specified in the first invocation, because the initial argv resides on
 the stack and cannot be freed.
\end_layout

\begin_layout LyX-Code

\series bold
static bool
\series default
 get_cakes(
\series bold
int *
\series default
argc, 
\series bold
const char ***
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXoption option_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

                ...
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 HX_getopt(cake_table, argc, argv,
\begin_inset Newline newline
\end_inset

               HXOPT_USAGEONERR | HXOPT_DESTROY_OLD) > 0;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static bool
\series default
 get_fruit(
\series bold
int *
\series default
argc, 
\series bold
const char ***
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXoption fruit_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

                ...
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 HX_getopt(fruit_table, argc, argv,
\begin_inset Newline newline
\end_inset

               HXOPT_USAGEONERR | HXOPT_DESTROY_OLD) > 0;
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static bool
\series default
 get_options(
\series bold
int *
\series default
argc, 
\series bold
const char ***
\series default
argv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 cake = 0, fruit = 0;
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 HXoption option_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

                {.ln = "cake",  .type = HXTYPE_NONE, .ptr = &cake},
\begin_inset Newline newline
\end_inset

                {.ln = "fruit", .type = HXTYPE_NONE, .ptr = &fruit},
\begin_inset Newline newline
\end_inset

                HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

        };
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (HX_getopt(option_table, argc, argv, HXOPT_PTHRU) <= 0)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 false;
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 (cake)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 get_cakes(argc, argv);
\begin_inset Newline newline
\end_inset

        
\series bold
else if
\series default
 (fruit)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 get_fruit(argc, argv);
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 false;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Shell-style configuration file parser
\begin_inset CommandInset label
LatexCommand label
name "sec:shconf"

\end_inset


\end_layout

\begin_layout Standard
libHX provides functions to read shell-style configuration files.
 Such files are common, for example, in 
\family typewriter
/etc/sysconfig
\family default
 on Linux systems.
 The format is pretty basic; it only knows about 
\begin_inset Quotes eld
\end_inset


\family typewriter
key=value
\family default

\begin_inset Quotes erd
\end_inset

 pairs and does not even have sections like INI files.
 Not relying on any features however makes them quite interchangable as
 the syntax is accepted by Unix Shells.
\end_layout

\begin_layout Standard
Lines beginning with a hash mark (
\family typewriter
#
\family default
) are ignored, as are empty lines and unrecognized keys.
\end_layout

\begin_layout LyX-Code

\series bold
# Minimum / maximum values for automatic UID selection
\series default

\begin_inset Newline newline
\end_inset

UID_MIN=100
\begin_inset Newline newline
\end_inset

UID_MAX=65000
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
# Home directory base
\series default

\begin_inset Newline newline
\end_inset

HOME="/home"
\begin_inset Newline newline
\end_inset

#HOME="/export/home"
\end_layout

\begin_layout Standard
Any form of variable or parameter substitution or expansion is highly implementa
tion specific, and is not supported in libHX's reader.
 Even Shell users should not rely on it as you never know in which context
 the configuration files are evaluated.
 Still, you will have to escape specific sequences like you would need to
 in Shell.
 The use of single quotes is acceptable.
 That means:
\end_layout

\begin_layout LyX-Code
AMOUNT="US
\backslash
$5"
\begin_inset Newline newline
\end_inset

AMOUNT='US$5'
\end_layout

\begin_layout Subsection
Synopsis
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/option.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/option.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_shconfig(
\series bold
const char *
\series default
file, 
\series bold
const struct
\series default
 HXoption 
\series bold
*
\series default
table);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_shconfig
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_shconfig_pv(
\series bold
const char **
\series default
path_vec, 
\series bold
const char *
\series default
file,
\begin_inset Newline newline
\end_inset

                   
\series bold
const struct
\series default
 HXoption 
\series bold
*
\series default
table, 
\series bold
unsigned int
\series default
 flags);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_shconfig_pv
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The shconfig parser reuses 
\family typewriter
struct HXoption
\family default
 that fits very well in specifying name-pointer associations.
 
\family typewriter
HX_shconfig
\family default
 will read the given file using the key-to-pointer mappings from the table
 to store the variable contents.
 Of 
\family typewriter
struct HXoption
\family default
, described in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-synopsis"

\end_inset

, only the 
\begin_inset Quotes eld
\end_inset


\family typewriter
ln
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
type
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
ptr
\family default

\begin_inset Quotes erd
\end_inset

 fields are used.
 The list of accepted types is described in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:option-types"

\end_inset

.
\end_layout

\begin_layout Standard
To parse a file, call 
\family typewriter
HX_shconfig
\family default
 function with the corresponding parameters.
 If you want to read configuration files from different paths, i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset

to build up on default values, you can use 
\family typewriter
HX_shconfig_pv
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
pv = path vector
\end_layout

\end_inset

, which is a variant for reading a file from multiple locations.
 Its purpose is to facilitate reading system-wide settings which are then
 overriden by a file in the users home directory, for example (per-setting-overr
ide).
 It is also possible to do per-file-override, that is, a file in the home
 directory has higher precedence than a system-wide one in such a way that
 the system-wide configuration file is not even read.
 This is accomplished by traversing the paths in the 
\begin_inset Quotes eld
\end_inset

other
\begin_inset Quotes erd
\end_inset

 direction (actually you have to turn the array around) and stopping at
 the first existing file by use of the 
\family typewriter
SHCONF_\SpecialChar \-
ONE
\family default
 flag.
\end_layout

\begin_layout Description

\family typewriter
SHCONF_ONE
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
SHCONF_ONE
\end_layout

\end_inset


\family default
\series default
 Parsing files will stop after one file has been successfully parsed.
 This allows for a 
\begin_inset Quotes eld
\end_inset

personal overrides system config
\begin_inset Quotes erd
\end_inset

 style.
\end_layout

\begin_layout Standard
The call to 
\family typewriter
HX_shconfig
\family default
 will either return >0 for success, 0 for no success (actually, this is
 never returned) and 
\family typewriter
-errno
\family default
 for an error.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Subsubsection
Per-setting-override
\end_layout

\begin_layout LyX-Code

\series bold
long
\series default
 uid_min, uid_max;
\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
passwd_file;
\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXoption options_table
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {.ln = "UID_MIN",  .type = HXTYPE_LONG,   .ptr = &uid_min},
\begin_inset Newline newline
\end_inset

        {.ln = "UID_MAX",  .type = HXTYPE_LONG,   .ptr = &uid_max},
\begin_inset Newline newline
\end_inset

        {.ln = "PWD_FILE", .type = HXTYPE_STRING, .ptr = &passwd_file},
\begin_inset Newline newline
\end_inset

        HXOPT_TABLEEND,
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\series bold
const char *
\series default
home = getenv("HOME");
\begin_inset Newline newline
\end_inset


\series bold
const char *
\series default
paths
\series bold
[]
\series default
 = {"/etc", home, NULL};
\begin_inset Newline newline
\end_inset

HX_shconfig(paths, "test.cf", options_table, 0);
\end_layout

\begin_layout Subsubsection
Per-file-override
\end_layout

\begin_layout LyX-Code

\series bold
const char *
\series default
home = getenv("HOME");
\begin_inset Newline newline
\end_inset


\series bold
const char *
\series default
paths
\series bold
[]
\series default
 = {home, "/usr/local/etc", "/etc", NULL};
\begin_inset Newline newline
\end_inset

HX_shconfig_pv(paths, "test.cf", options_table, SHCONF_ONE);
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Systems-related components
\end_layout

\begin_layout Section
Random numbers
\begin_inset CommandInset label
LatexCommand label
name "sec:random"

\end_inset


\end_layout

\begin_layout Subsection
Function overview
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/misc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/misc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HX_rand(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_rand
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
unsigned int
\series default
 HX_irand(
\series bold
unsigned int
\series default
 min, 
\series bold
unsigned int
\series default
 max);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_irand
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HX_rand
\family default
 Retrieve the next random number, with 
\begin_inset Formula $0\le n<2^{b-1}$
\end_inset

 where 
\begin_inset Formula $b$
\end_inset

 is the number of bits in an 
\begin_inset Quotes eld
\end_inset


\family typewriter
int
\family default

\begin_inset Quotes erd
\end_inset

.
 This is different than libc's 
\family typewriter
rand
\family default
 which returns a number 
\begin_inset Formula $0\le n\le\texttt{RAND\_MAX}$
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
HX_irand
\family default
 Retrieve the next random number and fold it so that 
\begin_inset Formula $\textit{min}\le n<\textit{max}$
\end_inset

.
\end_layout

\begin_layout Subsection
Implementation information
\end_layout

\begin_layout Standard
On systems that provide operating system-level random number generators,
 predominantly Linux and Unix-alikes such as BSD and Solaris, these will
 be used when they are available and random numbers are requested through
 
\family typewriter
HX_rand
\family default
 or 
\family typewriter
HX_irand
\family default
.
\end_layout

\begin_layout Standard
On Linux, Solaris and the BSDs, this is 
\family typewriter
/dev/urandom
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
/dev/urandom
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If no random number generating device is available (and libHX configured
 to use it), it will fall back to using the libc's 
\family typewriter
rand
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
rand
\end_layout

\end_inset

 function.
 If libc is selected for random number generation, 
\family typewriter
srand
\family default
 will be called on library initialization with what is believed to be good
 defaults
\begin_inset space ~
\end_inset

--- usually this will be before a program's 
\family typewriter
main
\family default
 function with normal linking, but may actually happen later when used with
 
\family typewriter
dlopen
\family default
.
 The initial seed would be the current microtime when 
\family typewriter
gettimeofday
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
gettimeofday
\end_layout

\end_inset


\family default
 is available, or just the seconds with 
\family typewriter
time
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
time
\end_layout

\end_inset

.
 To counter the problem of different programs potentially using the same
 seed within a time window of a second due to the limited granularity of
 standard 
\family typewriter
time
\family default
, the seed is augmented by process ID and parent process ID where available.
\end_layout

\begin_layout Standard

\family typewriter
/dev/random
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
/dev/random
\end_layout

\end_inset


\family default
 is not used on Linux because it may block during read, and 
\family typewriter
/dev/urandom
\family default
 is just as good when there is entropy available.
 If you need definitive PRNG
\begin_inset Index
status open

\begin_layout Plain Layout
PRNG
\end_layout

\end_inset

 security, perhaps use one from a crypto suite such as OpenSSL.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Process management
\begin_inset CommandInset label
LatexCommand label
name "sec:proc"

\end_inset


\end_layout

\begin_layout Standard
The process code is experimental at this stage (just moved from the pam_mount
 codebase).
 As it also relies on the POSIX functions 
\family typewriter
fork
\family default
, 
\family typewriter
execv
\family default
, 
\family typewriter
execvp
\family default
 and 
\family typewriter
pipe
\family default
(2), so it may not be available everywhere.
 Where this is the case, the functions will return 
\family typewriter
-ENOSYS
\family default
.
\end_layout

\begin_layout Subsection
Process metadata structure
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/proc.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/proc.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXproc {
\begin_inset Newline newline
\end_inset

        
\series bold
const struct
\series default
 HXproc_ops 
\series bold
*
\series default
p_ops;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
p_data;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 p_flags;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
/* 
\family roman
\series default
\shape italic
Following members should only be read
\family default
\series bold
\shape default
 */
\series default

\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 p_stdin, p_stdout, p_stderr;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 p_pid;
\begin_inset Newline newline
\end_inset

        
\series bold
char
\series default
 p_status;
\begin_inset Newline newline
\end_inset

        
\series bold
bool
\series default
 p_exited, p_terminated;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
When creating a new process with the intent of running it asynchronously
 (using 
\family typewriter
HXproc_run_async
\family default
), the first three fields must be filled in by the user.
\end_layout

\begin_layout Description

\family typewriter
p_ops
\family default
 A table of callbacks, generally used for setting and/or restoring signals
 before/after execution.
 This member may be 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Description

\family typewriter
p_data
\family default
 Free pointer for the user to supply.
 Will be passed to the callback functions when they are invoked.
\end_layout

\begin_layout Description

\family typewriter
p_flags
\family default
 Process creation flags, see below.
\end_layout

\begin_layout Standard
After the subprocess has been started, 
\family typewriter
HXproc_run_async
\family default
 will have filled in some fields:
\end_layout

\begin_layout Description

\family typewriter
p_stdin
\family default
 If 
\family typewriter
HXPROC_STDIN
\family default
 was specified in 
\family typewriter
p_flags
\family default
, 
\family typewriter
p_stdin
\family default
 will be assigned the write side file descriptor of the subprocess's to-be
 stdin.
 The subprocess will get the read side file descriptor in this member.
 This is so that the correct fd is used in when 
\family typewriter
p_ops->p_postfork
\family default
 is called.
\end_layout

\begin_layout Description

\family typewriter
p_stdout
\family default
 If 
\family typewriter
HXPROC_STDOUT
\family default
 is specified in 
\family typewriter
p_flags
\family default
, 
\family typewriter
p_stdout
\family default
 will be assigned the read side file descriptor of the subprocess's to-be
 stdout.
 The subprocess will get the write side file descriptor in this member.
\end_layout

\begin_layout Description

\family typewriter
p_stderr
\family default
 If 
\family typewriter
HXPROC_STDERR
\family default
 is specified in 
\family typewriter
p_flags
\family default
, 
\family typewriter
p_stderr
\family default
 will be assigned the read side file descriptor of the subprocess's to-be
 stderr, and the subprocess will get the write side fd.
\end_layout

\begin_layout Description

\family typewriter
p_pid
\family default
 The process ID of the spawned process.
\end_layout

\begin_layout Standard
Upon calling 
\family typewriter
HXproc_wait
\family default
, further fields will have been filled when the function returns:
\end_layout

\begin_layout Description

\family typewriter
p_exited
\family default
 Whether the process exited normally (cf.
\begin_inset space \space{}
\end_inset

signalled\SpecialChar \slash{}
terminated).
\end_layout

\begin_layout Description

\family typewriter
p_terminated
\family default
 Whether the process was terminated (signalled).
\end_layout

\begin_layout Description

\family typewriter
p_status
\family default
 The exit status of the process or the termination signal.
\end_layout

\begin_layout Subsubsection
Flags
\begin_inset CommandInset label
LatexCommand label
name "sub:proc-pflags"

\end_inset


\end_layout

\begin_layout Standard
Possible values for the 
\family typewriter
p_flags
\family default
 member are:
\end_layout

\begin_layout Description

\family typewriter
HXPROC_STDIN
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_STDIN
\end_layout

\end_inset


\family default
\series default
 The subprocess's stdin file descriptor shall be connected to the master
 program, that is, not inherit the stdin of the master.
 Cannot be used for 
\family typewriter
HXproc_\SpecialChar \-
run_\SpecialChar \-
sync
\family default
 (because there would be no one to provide data in a sync operation).
\end_layout

\begin_layout Description

\family typewriter
HXPROC_STDOUT
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXPROC_STDOUT
\end_layout

\end_inset


\family default
\series default
 Connect the stdout file descriptor of the subprocess with the master.
 Cannot be used for 
\family typewriter
HXproc_run_sync
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_STDERR
\series medium

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\series medium
HXPROC_STDERR
\end_layout

\end_inset


\family default
\series default
 Connect the stderr file descriptor of the subprocess with the master.
 Cannot be used for 
\family typewriter
HXproc_run_sync
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_NULL_STDIN
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_NULL_STDIN
\end_layout

\end_inset

 The subprocess's stdin file descriptor shall be connected to 
\family typewriter
/dev\SpecialChar \slash{}
null
\family default
.
 
\family typewriter
HXPROC_\SpecialChar \-
STDIN
\family default
 and 
\family typewriter
HXPROC_\SpecialChar \-
NULL_\SpecialChar \-
STDIN
\family default
 are mutually exclusive.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_NULL_STDOUT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_NULL_STDOUT
\end_layout

\end_inset

 Connect the stdout file descriptor of the subprocess to 
\family typewriter
/dev\SpecialChar \slash{}
null
\family default
, thereby essentially discarding its output.
 
\family typewriter
HXPROC_\SpecialChar \-
STDOUT
\family default
 and 
\family typewriter
HXPROC_\SpecialChar \-
NULL_\SpecialChar \-
STDOUT
\family default
 are mutuall exclusive.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_NULL_STDERR
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_NULL_STDERR
\end_layout

\end_inset

 Connect the stderr file descriptor of the subprocess to 
\family typewriter
/dev\SpecialChar \slash{}
null
\family default
, thereby essentially discarding its output.
 
\family typewriter
HXPROC_\SpecialChar \-
STDERR
\family default
 and 
\family typewriter
HXPROC_\SpecialChar \-
NULL_\SpecialChar \-
STDERR
\family default
 are mutually exclusive.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_VERBOSE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_VERBOSE
\end_layout

\end_inset

 Have the subprocess print an error message to stderr if exec'ing returned
 an error.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_A0
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_A0
\end_layout

\end_inset

 
\family typewriter
argv[0]
\family default
 refers to program file, while 
\family typewriter
argv[1]
\family default
 to the program invocation name, with 
\family typewriter
argv[2]
\family default
 being the arguments.
 Without this flag, 
\family typewriter
argv[0]
\family default
 will be both the program file and program invocation name, and arguments
 begin at 
\family typewriter
argv[1]
\family default
.
\end_layout

\begin_layout Description

\family typewriter
HXPROC_EXECV
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXPROC_EXECV
\end_layout

\end_inset

 Normally, 
\family typewriter
execvp
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
execvp
\end_layout

\end_inset

 will be used which scans 
\family typewriter
$PATH
\family default
 for the program.
 Use this flag to use 
\family typewriter
execv
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
execv
\end_layout

\end_inset

 instead, which will not do such thing.
\end_layout

\begin_layout Subsection
Callbacks
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/proc.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXproc_ops {
\begin_inset Newline newline
\end_inset

        
\series bold
void (*
\series default
p_prefork
\series bold
)
\series default
(
\series bold
void *
\series default
);
\begin_inset Newline newline
\end_inset

        
\series bold
void (*
\series default
p_postfork
\series bold
)
\series default
(
\series bold
void *
\series default
);
\begin_inset Newline newline
\end_inset

        
\series bold
void (*
\series default
p_complete
\series bold
)
\series default
(
\series bold
void *
\series default
);
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard

\family typewriter
struct HXproc_ops
\family default
 provides a way to run user-specified functions just before the fork, after,
 and when the process has been waited for.
 They can be used to set and/or restore signals as needed, for example.
 The function pointers can be 
\family typewriter
NULL
\family default
.
 The 
\family typewriter
p_data
\family default
 member is passed as an argument.
\end_layout

\begin_layout Description

\family typewriter
p_prefork
\family default
 Run immediately before calling 
\family typewriter
fork
\family default
(2).
 This is useful, for taking any action regarding signals, like setting 
\family typewriter
SIGCHLD
\family default
 to 
\family typewriter
SIG_DFL
\family default
, or 
\family typewriter
SIGPIPE
\family default
 to 
\family typewriter
SIG_IGN
\family default
, for example.
\end_layout

\begin_layout Description

\family typewriter
p_postfork
\family default
 Run in the subprocess (and only there) after forking.
 Useful to do a 
\family typewriter
setuid
\family default
(2) or other change in privilege level.
\end_layout

\begin_layout Description

\family typewriter
p_complete
\family default
 Run in 
\family typewriter
HXproc_wait
\family default
 when the process has been waited for.
 Useful to restore the signal handler(s).
\end_layout

\begin_layout Subsection
Process control
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/proc.h>
\begin_inset Newline newline
\end_inset


\series bold

\begin_inset Newline newline
\end_inset

int
\series default
 HXproc_run_async(
\series bold
const char *const *
\series default
argv, 
\series bold
struct
\series default
 HXproc 
\series bold
*
\series default
proc);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXproc_run_async
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HXproc_run_sync(
\series bold
const char *const *
\series default
argv, 
\series bold
unsigned int
\series default
 flags);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXproc_run_sync
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 HXproc_wait(
\series bold
struct
\series default
 HXproc 
\series bold
*
\series default
proc);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HXproc_wait
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
HXproc_run_async
\family default
 Start a subprocess according to the parameters in 
\family typewriter
proc
\family default
.
 Returns a negative errno code if something went wrong, or positive non-zero
 on success.
\end_layout

\begin_layout Description

\family typewriter
HXproc_run_sync
\family default
 Start a subprocess synchronously, similar to calling 
\family typewriter
system
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
system
\end_layout

\end_inset

, but with the luxury of being able to specify arguments as separate strings
 (via argv) rather than one big command line that is run through the shell.
 
\family typewriter
flags
\family default
 is a value composed of the HXproc flags mentioned above in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:proc-pflags"

\end_inset

.
 
\family typewriter
HXPROC_STDIN
\family default
, 
\family typewriter
HXPROC_STDOUT
\family default
 and 
\family typewriter
HXPROC_STDERR
\family default
 are ignored because there would be no one in a synchronous execution that
 could supply data to these file descriptors or read from them
\begin_inset Foot
status open

\begin_layout Plain Layout
Even for threads, please just use the async model.
\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
HXproc_wait
\family default
 Wait for a subprocess to terminate, if it has not already.
 It will also retrieve the exit status of the process and store it in the
 
\family typewriter
struct HXproc
\family default
.
\end_layout

\begin_layout Standard
Return value will be positive non-zero on success, or negative on error.
 Underlying system function's errors are returned, plus:
\end_layout

\begin_layout Description

\family sans
EINVAL
\family default
 Flags were not accepted.
\end_layout

\begin_layout Section
Helper headers
\end_layout

\begin_layout Subsection
ctype helpers
\end_layout

\begin_layout Standard
Functions from the 
\family typewriter
<ctype.h>
\family default
 header, including, but not limited to, 
\family typewriter
isalpha
\family default
, 
\family typewriter
tolower
\family default
, and so forth, are defined to take an 
\begin_inset Quotes eld
\end_inset


\family typewriter
int
\family default

\begin_inset Quotes erd
\end_inset

 as first argument.
 Strings used in C programs are usually 
\begin_inset Quotes eld
\end_inset


\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default

\begin_inset Quotes erd
\end_inset

, without any 
\begin_inset Quotes eld
\end_inset


\family typewriter
signed
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
unsigned
\family default

\begin_inset Quotes erd
\end_inset

 qualifier.
 By a high-level view, which also matches daily common sense, characters
 (a.
\begin_inset space \thinspace{}
\end_inset

k.
\begin_inset space \thinspace{}
\end_inset

a.
\begin_inset space \space{}
\end_inset

letters) have no notion of signedness
\begin_inset space ~
\end_inset

--- there is no 
\begin_inset Quotes eld
\end_inset

positive
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

negative
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 in at least the Latin alphabet that is mapped into the ASCII set.
 In fact, 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 could either be 
\family typewriter
signed char
\begin_inset space ~
\end_inset

*
\family default
 or 
\family typewriter
unsigned char
\begin_inset space ~
\end_inset

*
\family default
, depending on the compiler settings.
 Only when you start interpreting and using characters as a number does
 such become important.
 
\end_layout

\begin_layout Standard
There come the problems.
 Characters are in the same class as numbers in C, that is, can be implicitly
 converted from or to a 
\begin_inset Quotes eld
\end_inset

number
\begin_inset Quotes erd
\end_inset

 (in this case, their ASCII code point) without causing a compiler warning.
 That may be practical in some cases, but is also a bit 
\begin_inset Quotes eld
\end_inset

unfortunate
\begin_inset Quotes erd
\end_inset

.
 Characters, when interpreted as the 8-bit signed numeric quantity they
 are implicitly convertable to, run from 0 to 127 and \SpecialChar \nobreakdash-
128 to \SpecialChar \nobreakdash-
1.
 Since the 
\family typewriter
isalpha
\family default
 function and others from 
\family typewriter
ctype.h
\family default
 take a (signed) 
\family typewriter
int
\family default
 as argument means that values fed to 
\family typewriter
isalpha
\family default
 are sign-extended, preserving negative values.
\end_layout

\begin_layout LyX-Code

\series bold
/* 
\family roman
\series default
\shape italic

\begin_inset Quotes eld
\end_inset

hyvää yötä
\begin_inset Quotes erd
\end_inset

, UTF-8 encoded
\family default
\series bold
\shape default
 */
\end_layout

\begin_layout LyX-Code

\series bold
const char 
\series default
h
\series bold
[]
\series default
 = {'h', 'y', 'v', 0xc3, 0xa4, 0xc3, 0xa4, ' ',
\begin_inset Newline newline
\end_inset

                  'y', 0xc3, 0xb6, 't', 0xc3, 0xa4};
\end_layout

\begin_layout Standard
When you now pass 
\family typewriter
h[3]
\family default
 to 
\family typewriter
isalpha
\family default
 for example (regardless of whether doing so actually produces a meaningful
 result), the CPU is instructed to copy 
\begin_inset Quotes eld
\end_inset

0xc3
\begin_inset Quotes erd
\end_inset

 into a register and sign-extend it (because 
\begin_inset Quotes eld
\end_inset

char
\begin_inset Quotes erd
\end_inset

 is often 
\begin_inset Quotes eld
\end_inset

signed char
\begin_inset Quotes erd
\end_inset

, see above), producing 0xffffffc3 (\SpecialChar \nobreakdash-
61).
 But passing \SpecialChar \nobreakdash-
61 is not what was intended.
\end_layout

\begin_layout Standard
libHX's 
\family typewriter
ctype_helper.h
\family default
 therefore provides wrappers with a different function signature that uses
 zero extension (not sign extension) by means of using an 
\family typewriter
unsigned
\family default
 quantity.
 Currently this is
\family typewriter
 unsigned char
\family default
, because 
\family typewriter
isalpha
\family default
's domain only goes from 0--255.
 The implication is that you cannot pass 
\family typewriter
EOF
\family default
 to 
\family typewriter
HX_isalpha
\family default
.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/ctype_helper.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/ctype_helper.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isalnum(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_isalnum
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isalpha(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_isalpha
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isdigit(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_isdigit
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_islower(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_islower
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isprint(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_isprint
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isspace(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_isspace
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isupper(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_isupper
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 HX_isxdigit(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_isxdigit
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
unsigned char
\series default
 HX_tolower(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_tolower
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
unsigned char
\series default
 HX_toupper(
\series bold
unsigned char
\series default
 c);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
HX_toupper
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
is*
\family default
 functions also differ from ctype's in that they return 
\family typewriter
bool
\family default
 instead of 
\family typewriter
int
\family default
.
 Not all functions from 
\family typewriter
ctype.h
\family default
 are present either; 
\family typewriter
isascii
\family default
, 
\family typewriter
isblank
\family default
, 
\family typewriter
iscntrl
\family default
, 
\family typewriter
isgraph
\family default
, 
\family typewriter
ispunct
\family default
 and 
\family typewriter
isxdigit
\family default
 have been omitted as the author has never needed them so far.
\end_layout

\begin_layout Subsection
libxml2 helpers
\end_layout

\begin_layout Standard
libxml2 uses an 
\begin_inset Quotes eld
\end_inset


\family typewriter
xmlChar
\family default

\begin_inset Quotes erd
\end_inset

 type as an underlying type for the strings that it reads and outputs.
 
\family typewriter
xmlChar
\family default
 is typedef'ed to 
\family typewriter
unsigned char
\family default
 by libxml2, causing compiler warnings related to differing signedness whenever
 interacting with strings from the outside world, which are usually just
 a pointer to 
\family typewriter
char
\family default
.
 Because casting would be a real chore, 
\family typewriter
libxml_helper.h
\family default
 will do it by providing some wrappers with better argument types.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/libxml_helper.h>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/libxml_helper.h
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 xml_strcmp(
\series bold
const
\series default
 xmlChar 
\series bold
*
\series default
a, 
\series bold
const char *
\series default
b);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xml_strcmp
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 xml_strcasecmp(
\series bold
const
\series default
 xmlChar 
\series bold
*
\series default
a, 
\series bold
const char *
\series default
b);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xml_strcasecmp
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
xml_getprop(xmlNode 
\series bold
*
\series default
node, 
\series bold
const char *
\series default
attr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xml_getprop
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

xmlAttr 
\series bold
*
\series default
xml_newprop(xmlNode 
\series bold
*
\series default
node, 
\series bold
const char *
\series default
attr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xml_newprop
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

xmlNode 
\series bold
*
\series default
xml_newnode(xmlNs 
\series bold
*
\series default
ns, 
\series bold
const char *
\series default
name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
xml_newnode
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

xmlAttr 
\series bold
*
\series default
xml_setprop(xmlNode 
\series bold
*
\series default
node, 
\series bold
const char *
\series default
name, 
\series bold
const char *
\series default
value);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
\size normal
\color none
xml_setprop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The functions map to 
\family typewriter
strcmp
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
strcmp
\end_layout

\end_inset

, 
\family typewriter
strcasecmp
\family default
(3)
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
strcasecmp
\end_layout

\end_inset

, 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xmlGetProp
\end_layout

\end_inset


\family typewriter
xmlGetProp
\family default
, 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xmlNewProp
\end_layout

\end_inset


\family typewriter
xmlNewProp
\family default
, 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xmlNewNode
\end_layout

\end_inset


\family typewriter
xmlNewNode
\family default
 and 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
xmlSetProp
\end_layout

\end_inset


\family typewriter
xmlSetProp
\family default
, respectively.
\end_layout

\begin_layout Subsection
wxWidgets
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libHX/wx_helper.hpp>
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
libHX/wx_helper.hpp
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Shortcut macros
\end_layout

\begin_layout Description
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxACV
\end_layout

\end_inset


\family typewriter
wxACV
\family default
 Expands to 
\family typewriter

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxALIGN_CENTER_VERTICAL
\end_layout

\end_inset

wxALIGN_CENTER_VERTICAL
\end_layout

\begin_layout Description
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxCFF
\end_layout

\end_inset


\family typewriter
wxCFF
\family default
 Expands to a set of 
\begin_inset Quotes eld
\end_inset

common frame flags
\begin_inset Quotes erd
\end_inset

 for dialogs.
\end_layout

\begin_layout Description
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxDPOS
\end_layout

\end_inset


\family typewriter
wxDPOS
\family default
 Expands to 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxDefaultPosition
\end_layout

\end_inset


\family typewriter
wxDefaultPosition
\family default
.
\end_layout

\begin_layout Description
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxDSIZE
\end_layout

\end_inset


\family typewriter
wxDSIZE
\family default
 Expands to 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxDefaultSize
\end_layout

\end_inset


\family typewriter
wxDefaultSize
\family default
.
\end_layout

\begin_layout Subsubsection
String conversion
\end_layout

\begin_layout LyX-Code
wxString wxfu8(
\series bold
const char *
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxfu8
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

wxString wxfv8(
\series bold
const char *
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxfv8
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
const char *
\series default
wxtu8(
\series bold
const
\series default
 wxString 
\series bold
&
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxtu8
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
wxfu8
\family default
 Converts an UTF-8 string to a 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxString
\end_layout

\end_inset


\family typewriter
wxString
\family default
 object.
\end_layout

\begin_layout Description

\family typewriter
wxfv8
\family default
 Converts an UTF-8 string to an entity usable by 
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
wxPrintf
\end_layout

\end_inset


\family typewriter
wxPrintf
\family default
.
\end_layout

\begin_layout Description

\family typewriter
wxtu8
\family default
 Converts a wxString to a pointer to char usable by 
\family typewriter
printf
\family default
.
 Note that the validity of the pointer is very limited and usually does
 not extend the statement in which it is used.
 Hence storing the pointer in a variable (
\begin_inset Quotes eld
\end_inset


\family typewriter
const char *p = wxtu8(s);
\family default

\begin_inset Quotes erd
\end_inset

) will make 
\family typewriter
p
\family default
 pointing to an invalid region as soon as the assignment is done.
\end_layout

\begin_layout Part
\start_of_appendix
Appendix
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex

\end_inset


\end_layout

\end_body
\end_document
